// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package org.matrix.rustcomponents.sdk.crypto;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "matrix_sdk_crypto_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "matrix_sdk_crypto_ffi")
            .also { lib: _UniFFILib ->
                FfiConverterTypeLogger.register(lib)
                FfiConverterTypeProgressListener.register(lib)
                FfiConverterTypeQrCodeListener.register(lib)
                FfiConverterTypeSasListener.register(lib)
                FfiConverterTypeVerificationRequestListener.register(lib)
                }
            
        }
    }

    
    fun ffi_matrix_sdk_crypto_ffi_bf0e_Sas_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_Sas_other_user_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_other_device_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_flow_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_room_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_we_started(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_Sas_is_done(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_Sas_accept(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_confirm(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_cancel(`ptr`: Pointer,`cancelCode`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_get_emoji_indices(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_get_decimals(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Sas_set_changes_listener(`ptr`: Pointer,`listener`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_Sas_state(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_bf0e_QrCode_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_other_user_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_other_device_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_flow_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_room_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_we_started(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_is_done(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_is_cancelled(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_cancel_info(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_reciprocated(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_has_been_scanned(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_confirm(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_cancel(`ptr`: Pointer,`cancelCode`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_generate_qr_code(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_set_changes_listener(`ptr`: Pointer,`listener`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_QrCode_state(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_bf0e_VerificationRequest_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_other_user_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_other_device_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_flow_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_room_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_we_started(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_ready(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_done(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_passive(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_cancelled(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_cancel_info(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_their_supported_methods(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_our_supported_methods(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_accept(`ptr`: Pointer,`methods`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_start_sas_verification(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_start_qr_verification(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_scan_qr_code(`ptr`: Pointer,`data`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_cancel(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_set_changes_listener(`ptr`: Pointer,`listener`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_VerificationRequest_state(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_bf0e_Verification_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_Verification_as_qr(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_Verification_as_sas(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_bf0e_OlmMachine_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_new(`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_outgoing_requests(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_mark_request_as_sent(`ptr`: Pointer,`requestId`: RustBuffer.ByValue,`requestType`: RustBuffer.ByValue,`response`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_get_identity(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`timeout`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_verify_identity(`ptr`: Pointer,`userId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_get_device(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`timeout`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_set_local_trust(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`trustState`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_verify_device(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_get_user_devices(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`timeout`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_import_room_keys(`ptr`: Pointer,`keys`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,`progressListener`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_import_decrypted_room_keys(`ptr`: Pointer,`keys`: RustBuffer.ByValue,`progressListener`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_is_identity_verified(`ptr`: Pointer,`userId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_sign(`ptr`: Pointer,`message`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun matrix_sdk_crypto_ffi_bf0e_OlmMachine_verify_backup(`ptr`: Pointer,`authData`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_backup_enabled_18b9(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_backup_room_keys_e0d8(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_bootstrap_cross_signing_379(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_cross_signing_status_e4ae(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_decrypt_room_event_569d(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,`handleVerificationEvents`: Byte,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_device_id_efde(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_disable_backup_ac9f(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_discard_room_key_ac56(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_enable_backup_v1_a0a2(`ptr`: Pointer,`key`: RustBuffer.ByValue,`version`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_encrypt_63b1(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`eventType`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_export_cross_signing_keys_47bf(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_export_room_keys_937c(`ptr`: Pointer,`passphrase`: RustBuffer.ByValue,`rounds`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_backup_keys_d873(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_missing_sessions_e0ed(`ptr`: Pointer,`users`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_verification_18fa(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`flowId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_verification_request_a81d(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`flowId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_verification_requests_9571(`ptr`: Pointer,`userId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_identity_keys_705c(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_import_cross_signing_keys_7223(`ptr`: Pointer,`export`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_is_user_tracked_fa20(`ptr`: Pointer,`userId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_receive_sync_changes_a0bf(`ptr`: Pointer,`events`: RustBuffer.ByValue,`deviceChanges`: RustBuffer.ByValue,`keyCounts`: RustBuffer.ByValue,`unusedFallbackKeys`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_receive_unencrypted_verification_event_1ccd(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_receive_verification_event_8215(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_room_key_85db(`ptr`: Pointer,`event`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_self_verification_8b29(`ptr`: Pointer,`methods`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_verification_32bd(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`roomId`: RustBuffer.ByValue,`eventId`: RustBuffer.ByValue,`methods`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_verification_with_device_11bb(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,`methods`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_room_key_counts_de1b(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_save_recovery_key_c6c9(`ptr`: Pointer,`key`: RustBuffer.ByValue,`version`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_share_room_key_11c0(`ptr`: Pointer,`roomId`: RustBuffer.ByValue,`users`: RustBuffer.ByValue,`settings`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_start_sas_with_device_1aae(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`deviceId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_update_tracked_users_408f(`ptr`: Pointer,`users`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_user_id_4573(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_verification_request_content_7099(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`methods`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_new(
    _uniffi_out_err: RustCallStatus
    ): Pointer
    fun matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_from_passphrase(`passphrase`: RustBuffer.ByValue,`salt`: RustBuffer.ByValue,`rounds`: Int,
    _uniffi_out_err: RustCallStatus
    ): Pointer
    fun matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_new_from_passphrase(`passphrase`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer
    fun matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_from_base64(`key`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer
    fun matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_from_base58(`key`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Pointer
    fun _uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_decrypt_v1_9754(`ptr`: Pointer,`ephemeralKey`: RustBuffer.ByValue,`mac`: RustBuffer.ByValue,`ciphertext`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_megolm_v1_public_key_1d77(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_to_base58_3fbd(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_to_base64_8861(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_object_free_BackupKeys_7ad1(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun _uniffi_matrix_sdk_crypto_ffi_impl_BackupKeys_backup_version_6a86(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun _uniffi_matrix_sdk_crypto_ffi_impl_BackupKeys_recovery_key_2567(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Pointer
    fun ffi_matrix_sdk_crypto_ffi_bf0e_Logger_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_bf0e_ProgressListener_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_bf0e_SasListener_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_bf0e_QrCodeListener_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_bf0e_VerificationRequestListener_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_set_logger(`logger`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_migrate(`data`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,`progressListener`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun matrix_sdk_crypto_ffi_bf0e_migrate_sessions(`data`: RustBuffer.ByValue,`path`: RustBuffer.ByValue,`passphrase`: RustBuffer.ByValue,`progressListener`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_bf0e_rustbuffer_alloc(`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_bf0e_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
    fun ffi_matrix_sdk_crypto_ffi_bf0e_rustbuffer_free(`buf`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit
    fun ffi_matrix_sdk_crypto_ffi_bf0e_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface BackupKeysInterface {
    
    fun `backupVersion`(): String
    fun `recoveryKey`(): BackupRecoveryKey
}

class BackupKeys(
    pointer: Pointer
) : FFIObject(pointer), BackupKeysInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_object_free_BackupKeys_7ad1(this.pointer, status)
        }
    }

    override fun `backupVersion`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_BackupKeys_backup_version_6a86(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `recoveryKey`(): BackupRecoveryKey =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_BackupKeys_recovery_key_2567(it,  _status)
}
        }.let {
            FfiConverterTypeBackupRecoveryKey.lift(it)
        }
    
    

    
}

public object FfiConverterTypeBackupKeys: FfiConverter<BackupKeys, Pointer> {
    override fun lower(value: BackupKeys): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BackupKeys {
        return BackupKeys(value)
    }

    override fun read(buf: ByteBuffer): BackupKeys {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BackupKeys) = 8

    override fun write(value: BackupKeys, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface BackupRecoveryKeyInterface {
    @Throws(PkDecryptionException::class)
    fun `decryptV1`(`ephemeralKey`: String, `mac`: String, `ciphertext`: String): String
    fun `megolmV1PublicKey`(): MegolmV1BackupKey
    fun `toBase58`(): String
    fun `toBase64`(): String
}

class BackupRecoveryKey(
    pointer: Pointer
) : FFIObject(pointer), BackupRecoveryKeyInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_new( _status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_object_free(this.pointer, status)
        }
    }

    
        @Throws(PkDecryptionException::class)override fun `decryptV1`(`ephemeralKey`: String, `mac`: String, `ciphertext`: String): String =
        callWithPointer {
    rustCallWithError(PkDecryptionException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_decrypt_v1_9754(it, FfiConverterString.lower(`ephemeralKey`), FfiConverterString.lower(`mac`), FfiConverterString.lower(`ciphertext`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `megolmV1PublicKey`(): MegolmV1BackupKey =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_megolm_v1_public_key_1d77(it,  _status)
}
        }.let {
            FfiConverterTypeMegolmV1BackupKey.lift(it)
        }
    
    override fun `toBase58`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_to_base58_3fbd(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `toBase64`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_BackupRecoveryKey_to_base64_8861(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    companion object {
        fun `fromPassphrase`(`passphrase`: String, `salt`: String, `rounds`: Int): BackupRecoveryKey =
            BackupRecoveryKey(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_from_passphrase(FfiConverterString.lower(`passphrase`), FfiConverterString.lower(`salt`), FfiConverterInt.lower(`rounds`), _status)
})
        fun `newFromPassphrase`(`passphrase`: String): BackupRecoveryKey =
            BackupRecoveryKey(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_new_from_passphrase(FfiConverterString.lower(`passphrase`), _status)
})
        fun `fromBase64`(`key`: String): BackupRecoveryKey =
            BackupRecoveryKey(
    rustCallWithError(DecodeException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_from_base64(FfiConverterString.lower(`key`), _status)
})
        fun `fromBase58`(`key`: String): BackupRecoveryKey =
            BackupRecoveryKey(
    rustCallWithError(DecodeException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_BackupRecoveryKey_from_base58(FfiConverterString.lower(`key`), _status)
})
        
    }
    
}

public object FfiConverterTypeBackupRecoveryKey: FfiConverter<BackupRecoveryKey, Pointer> {
    override fun lower(value: BackupRecoveryKey): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BackupRecoveryKey {
        return BackupRecoveryKey(value)
    }

    override fun read(buf: ByteBuffer): BackupRecoveryKey {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BackupRecoveryKey) = 8

    override fun write(value: BackupRecoveryKey, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface OlmMachineInterface {
    @Throws(CryptoStoreException::class)
    fun `outgoingRequests`(): List<Request>@Throws(CryptoStoreException::class)
    fun `markRequestAsSent`(`requestId`: String, `requestType`: RequestType, `response`: String)@Throws(CryptoStoreException::class)
    fun `getIdentity`(`userId`: String, `timeout`: UInt): UserIdentity?@Throws(SignatureException::class)
    fun `verifyIdentity`(`userId`: String): SignatureUploadRequest@Throws(CryptoStoreException::class)
    fun `getDevice`(`userId`: String, `deviceId`: String, `timeout`: UInt): Device?@Throws(CryptoStoreException::class)
    fun `setLocalTrust`(`userId`: String, `deviceId`: String, `trustState`: LocalTrust)@Throws(SignatureException::class)
    fun `verifyDevice`(`userId`: String, `deviceId`: String): SignatureUploadRequest@Throws(CryptoStoreException::class)
    fun `getUserDevices`(`userId`: String, `timeout`: UInt): List<Device>@Throws(KeyImportException::class)
    fun `importRoomKeys`(`keys`: String, `passphrase`: String, `progressListener`: ProgressListener): KeysImportResult@Throws(KeyImportException::class)
    fun `importDecryptedRoomKeys`(`keys`: String, `progressListener`: ProgressListener): KeysImportResult@Throws(CryptoStoreException::class)
    fun `isIdentityVerified`(`userId`: String): Boolean
    fun `sign`(`message`: String): Map<String, Map<String, String>>@Throws(CryptoStoreException::class)
    fun `verifyBackup`(`authData`: String): SignatureVerification
    fun `backupEnabled`(): Boolean@Throws(CryptoStoreException::class)
    fun `backupRoomKeys`(): Request?@Throws(CryptoStoreException::class)
    fun `bootstrapCrossSigning`(): BootstrapCrossSigningResult
    fun `crossSigningStatus`(): CrossSigningStatus@Throws(DecryptionException::class)
    fun `decryptRoomEvent`(`event`: String, `roomId`: String, `handleVerificationEvents`: Boolean): DecryptedEvent
    fun `deviceId`(): String@Throws(CryptoStoreException::class)
    fun `disableBackup`()@Throws(CryptoStoreException::class)
    fun `discardRoomKey`(`roomId`: String)@Throws(DecodeException::class)
    fun `enableBackupV1`(`key`: MegolmV1BackupKey, `version`: String)@Throws(CryptoStoreException::class)
    fun `encrypt`(`roomId`: String, `eventType`: String, `content`: String): String
    fun `exportCrossSigningKeys`(): CrossSigningKeyExport?@Throws(CryptoStoreException::class)
    fun `exportRoomKeys`(`passphrase`: String, `rounds`: Int): String@Throws(CryptoStoreException::class)
    fun `getBackupKeys`(): BackupKeys?@Throws(CryptoStoreException::class)
    fun `getMissingSessions`(`users`: List<String>): Request?
    fun `getVerification`(`userId`: String, `flowId`: String): Verification?
    fun `getVerificationRequest`(`userId`: String, `flowId`: String): VerificationRequest?
    fun `getVerificationRequests`(`userId`: String): List<VerificationRequest>
    fun `identityKeys`(): Map<String, String>@Throws(SecretImportException::class)
    fun `importCrossSigningKeys`(`export`: CrossSigningKeyExport)@Throws(CryptoStoreException::class)
    fun `isUserTracked`(`userId`: String): Boolean@Throws(CryptoStoreException::class)
    fun `receiveSyncChanges`(`events`: String, `deviceChanges`: DeviceLists, `keyCounts`: Map<String, Int>, `unusedFallbackKeys`: List<String>?): String@Throws(CryptoStoreException::class)
    fun `receiveUnencryptedVerificationEvent`(`event`: String, `roomId`: String)@Throws(CryptoStoreException::class)
    fun `receiveVerificationEvent`(`event`: String, `roomId`: String)@Throws(DecryptionException::class)
    fun `requestRoomKey`(`event`: String, `roomId`: String): KeyRequestPair@Throws(CryptoStoreException::class)
    fun `requestSelfVerification`(`methods`: List<String>): RequestVerificationResult?@Throws(CryptoStoreException::class)
    fun `requestVerification`(`userId`: String, `roomId`: String, `eventId`: String, `methods`: List<String>): VerificationRequest?@Throws(CryptoStoreException::class)
    fun `requestVerificationWithDevice`(`userId`: String, `deviceId`: String, `methods`: List<String>): RequestVerificationResult?@Throws(CryptoStoreException::class)
    fun `roomKeyCounts`(): RoomKeyCounts@Throws(CryptoStoreException::class)
    fun `saveRecoveryKey`(`key`: BackupRecoveryKey?, `version`: String?)@Throws(CryptoStoreException::class)
    fun `shareRoomKey`(`roomId`: String, `users`: List<String>, `settings`: EncryptionSettings): List<Request>@Throws(CryptoStoreException::class)
    fun `startSasWithDevice`(`userId`: String, `deviceId`: String): StartSasResult?@Throws(CryptoStoreException::class)
    fun `updateTrackedUsers`(`users`: List<String>)
    fun `userId`(): String@Throws(CryptoStoreException::class)
    fun `verificationRequestContent`(`userId`: String, `methods`: List<String>): String?
}

class OlmMachine(
    pointer: Pointer
) : FFIObject(pointer), OlmMachineInterface {
    constructor(`userId`: String, `deviceId`: String, `path`: String, `passphrase`: String?) :
        this(
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_new(FfiConverterString.lower(`userId`), FfiConverterString.lower(`deviceId`), FfiConverterString.lower(`path`), FfiConverterOptionalString.lower(`passphrase`), _status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_OlmMachine_object_free(this.pointer, status)
        }
    }

    
        @Throws(CryptoStoreException::class)override fun `outgoingRequests`(): List<Request> =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_outgoing_requests(it,  _status)
}
        }.let {
            FfiConverterSequenceTypeRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `markRequestAsSent`(`requestId`: String, `requestType`: RequestType, `response`: String) =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_mark_request_as_sent(it, FfiConverterString.lower(`requestId`), FfiConverterTypeRequestType.lower(`requestType`), FfiConverterString.lower(`response`),  _status)
}
        }
    
    
    
        @Throws(CryptoStoreException::class)override fun `getIdentity`(`userId`: String, `timeout`: UInt): UserIdentity? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_get_identity(it, FfiConverterString.lower(`userId`), FfiConverterUInt.lower(`timeout`),  _status)
}
        }.let {
            FfiConverterOptionalTypeUserIdentity.lift(it)
        }
    
    
        @Throws(SignatureException::class)override fun `verifyIdentity`(`userId`: String): SignatureUploadRequest =
        callWithPointer {
    rustCallWithError(SignatureException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_verify_identity(it, FfiConverterString.lower(`userId`),  _status)
}
        }.let {
            FfiConverterTypeSignatureUploadRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `getDevice`(`userId`: String, `deviceId`: String, `timeout`: UInt): Device? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_get_device(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`deviceId`), FfiConverterUInt.lower(`timeout`),  _status)
}
        }.let {
            FfiConverterOptionalTypeDevice.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `setLocalTrust`(`userId`: String, `deviceId`: String, `trustState`: LocalTrust) =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_set_local_trust(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`deviceId`), FfiConverterTypeLocalTrust.lower(`trustState`),  _status)
}
        }
    
    
    
        @Throws(SignatureException::class)override fun `verifyDevice`(`userId`: String, `deviceId`: String): SignatureUploadRequest =
        callWithPointer {
    rustCallWithError(SignatureException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_verify_device(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`deviceId`),  _status)
}
        }.let {
            FfiConverterTypeSignatureUploadRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `getUserDevices`(`userId`: String, `timeout`: UInt): List<Device> =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_get_user_devices(it, FfiConverterString.lower(`userId`), FfiConverterUInt.lower(`timeout`),  _status)
}
        }.let {
            FfiConverterSequenceTypeDevice.lift(it)
        }
    
    
        @Throws(KeyImportException::class)override fun `importRoomKeys`(`keys`: String, `passphrase`: String, `progressListener`: ProgressListener): KeysImportResult =
        callWithPointer {
    rustCallWithError(KeyImportException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_import_room_keys(it, FfiConverterString.lower(`keys`), FfiConverterString.lower(`passphrase`), FfiConverterTypeProgressListener.lower(`progressListener`),  _status)
}
        }.let {
            FfiConverterTypeKeysImportResult.lift(it)
        }
    
    
        @Throws(KeyImportException::class)override fun `importDecryptedRoomKeys`(`keys`: String, `progressListener`: ProgressListener): KeysImportResult =
        callWithPointer {
    rustCallWithError(KeyImportException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_import_decrypted_room_keys(it, FfiConverterString.lower(`keys`), FfiConverterTypeProgressListener.lower(`progressListener`),  _status)
}
        }.let {
            FfiConverterTypeKeysImportResult.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `isIdentityVerified`(`userId`: String): Boolean =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_is_identity_verified(it, FfiConverterString.lower(`userId`),  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `sign`(`message`: String): Map<String, Map<String, String>> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_sign(it, FfiConverterString.lower(`message`),  _status)
}
        }.let {
            FfiConverterMapStringMapStringString.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `verifyBackup`(`authData`: String): SignatureVerification =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_OlmMachine_verify_backup(it, FfiConverterString.lower(`authData`),  _status)
}
        }.let {
            FfiConverterTypeSignatureVerification.lift(it)
        }
    
    override fun `backupEnabled`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_backup_enabled_18b9(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `backupRoomKeys`(): Request? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_backup_room_keys_e0d8(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `bootstrapCrossSigning`(): BootstrapCrossSigningResult =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_bootstrap_cross_signing_379(it,  _status)
}
        }.let {
            FfiConverterTypeBootstrapCrossSigningResult.lift(it)
        }
    
    override fun `crossSigningStatus`(): CrossSigningStatus =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_cross_signing_status_e4ae(it,  _status)
}
        }.let {
            FfiConverterTypeCrossSigningStatus.lift(it)
        }
    
    
        @Throws(DecryptionException::class)override fun `decryptRoomEvent`(`event`: String, `roomId`: String, `handleVerificationEvents`: Boolean): DecryptedEvent =
        callWithPointer {
    rustCallWithError(DecryptionException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_decrypt_room_event_569d(it, FfiConverterString.lower(`event`), FfiConverterString.lower(`roomId`), FfiConverterBoolean.lower(`handleVerificationEvents`),  _status)
}
        }.let {
            FfiConverterTypeDecryptedEvent.lift(it)
        }
    
    override fun `deviceId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_device_id_efde(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `disableBackup`() =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_disable_backup_ac9f(it,  _status)
}
        }
    
    
    
        @Throws(CryptoStoreException::class)override fun `discardRoomKey`(`roomId`: String) =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_discard_room_key_ac56(it, FfiConverterString.lower(`roomId`),  _status)
}
        }
    
    
    
        @Throws(DecodeException::class)override fun `enableBackupV1`(`key`: MegolmV1BackupKey, `version`: String) =
        callWithPointer {
    rustCallWithError(DecodeException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_enable_backup_v1_a0a2(it, FfiConverterTypeMegolmV1BackupKey.lower(`key`), FfiConverterString.lower(`version`),  _status)
}
        }
    
    
    
        @Throws(CryptoStoreException::class)override fun `encrypt`(`roomId`: String, `eventType`: String, `content`: String): String =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_encrypt_63b1(it, FfiConverterString.lower(`roomId`), FfiConverterString.lower(`eventType`), FfiConverterString.lower(`content`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `exportCrossSigningKeys`(): CrossSigningKeyExport? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_export_cross_signing_keys_47bf(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeCrossSigningKeyExport.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `exportRoomKeys`(`passphrase`: String, `rounds`: Int): String =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_export_room_keys_937c(it, FfiConverterString.lower(`passphrase`), FfiConverterInt.lower(`rounds`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `getBackupKeys`(): BackupKeys? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_backup_keys_d873(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeBackupKeys.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `getMissingSessions`(`users`: List<String>): Request? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_missing_sessions_e0ed(it, FfiConverterSequenceString.lower(`users`),  _status)
}
        }.let {
            FfiConverterOptionalTypeRequest.lift(it)
        }
    
    override fun `getVerification`(`userId`: String, `flowId`: String): Verification? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_verification_18fa(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`flowId`),  _status)
}
        }.let {
            FfiConverterOptionalTypeVerification.lift(it)
        }
    
    override fun `getVerificationRequest`(`userId`: String, `flowId`: String): VerificationRequest? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_verification_request_a81d(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`flowId`),  _status)
}
        }.let {
            FfiConverterOptionalTypeVerificationRequest.lift(it)
        }
    
    override fun `getVerificationRequests`(`userId`: String): List<VerificationRequest> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_get_verification_requests_9571(it, FfiConverterString.lower(`userId`),  _status)
}
        }.let {
            FfiConverterSequenceTypeVerificationRequest.lift(it)
        }
    
    override fun `identityKeys`(): Map<String, String> =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_identity_keys_705c(it,  _status)
}
        }.let {
            FfiConverterMapStringString.lift(it)
        }
    
    
        @Throws(SecretImportException::class)override fun `importCrossSigningKeys`(`export`: CrossSigningKeyExport) =
        callWithPointer {
    rustCallWithError(SecretImportException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_import_cross_signing_keys_7223(it, FfiConverterTypeCrossSigningKeyExport.lower(`export`),  _status)
}
        }
    
    
    
        @Throws(CryptoStoreException::class)override fun `isUserTracked`(`userId`: String): Boolean =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_is_user_tracked_fa20(it, FfiConverterString.lower(`userId`),  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `receiveSyncChanges`(`events`: String, `deviceChanges`: DeviceLists, `keyCounts`: Map<String, Int>, `unusedFallbackKeys`: List<String>?): String =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_receive_sync_changes_a0bf(it, FfiConverterString.lower(`events`), FfiConverterTypeDeviceLists.lower(`deviceChanges`), FfiConverterMapStringInt.lower(`keyCounts`), FfiConverterOptionalSequenceString.lower(`unusedFallbackKeys`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `receiveUnencryptedVerificationEvent`(`event`: String, `roomId`: String) =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_receive_unencrypted_verification_event_1ccd(it, FfiConverterString.lower(`event`), FfiConverterString.lower(`roomId`),  _status)
}
        }
    
    
    
        @Throws(CryptoStoreException::class)override fun `receiveVerificationEvent`(`event`: String, `roomId`: String) =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_receive_verification_event_8215(it, FfiConverterString.lower(`event`), FfiConverterString.lower(`roomId`),  _status)
}
        }
    
    
    
        @Throws(DecryptionException::class)override fun `requestRoomKey`(`event`: String, `roomId`: String): KeyRequestPair =
        callWithPointer {
    rustCallWithError(DecryptionException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_room_key_85db(it, FfiConverterString.lower(`event`), FfiConverterString.lower(`roomId`),  _status)
}
        }.let {
            FfiConverterTypeKeyRequestPair.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `requestSelfVerification`(`methods`: List<String>): RequestVerificationResult? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_self_verification_8b29(it, FfiConverterSequenceString.lower(`methods`),  _status)
}
        }.let {
            FfiConverterOptionalTypeRequestVerificationResult.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `requestVerification`(`userId`: String, `roomId`: String, `eventId`: String, `methods`: List<String>): VerificationRequest? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_verification_32bd(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`roomId`), FfiConverterString.lower(`eventId`), FfiConverterSequenceString.lower(`methods`),  _status)
}
        }.let {
            FfiConverterOptionalTypeVerificationRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `requestVerificationWithDevice`(`userId`: String, `deviceId`: String, `methods`: List<String>): RequestVerificationResult? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_request_verification_with_device_11bb(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`deviceId`), FfiConverterSequenceString.lower(`methods`),  _status)
}
        }.let {
            FfiConverterOptionalTypeRequestVerificationResult.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `roomKeyCounts`(): RoomKeyCounts =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_room_key_counts_de1b(it,  _status)
}
        }.let {
            FfiConverterTypeRoomKeyCounts.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `saveRecoveryKey`(`key`: BackupRecoveryKey?, `version`: String?) =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_save_recovery_key_c6c9(it, FfiConverterOptionalTypeBackupRecoveryKey.lower(`key`), FfiConverterOptionalString.lower(`version`),  _status)
}
        }
    
    
    
        @Throws(CryptoStoreException::class)override fun `shareRoomKey`(`roomId`: String, `users`: List<String>, `settings`: EncryptionSettings): List<Request> =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_share_room_key_11c0(it, FfiConverterString.lower(`roomId`), FfiConverterSequenceString.lower(`users`), FfiConverterTypeEncryptionSettings.lower(`settings`),  _status)
}
        }.let {
            FfiConverterSequenceTypeRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `startSasWithDevice`(`userId`: String, `deviceId`: String): StartSasResult? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_start_sas_with_device_1aae(it, FfiConverterString.lower(`userId`), FfiConverterString.lower(`deviceId`),  _status)
}
        }.let {
            FfiConverterOptionalTypeStartSasResult.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `updateTrackedUsers`(`users`: List<String>) =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_update_tracked_users_408f(it, FfiConverterSequenceString.lower(`users`),  _status)
}
        }
    
    
    override fun `userId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_user_id_4573(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `verificationRequestContent`(`userId`: String, `methods`: List<String>): String? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE._uniffi_matrix_sdk_crypto_ffi_impl_OlmMachine_verification_request_content_7099(it, FfiConverterString.lower(`userId`), FfiConverterSequenceString.lower(`methods`),  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    

    
}

public object FfiConverterTypeOlmMachine: FfiConverter<OlmMachine, Pointer> {
    override fun lower(value: OlmMachine): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): OlmMachine {
        return OlmMachine(value)
    }

    override fun read(buf: ByteBuffer): OlmMachine {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: OlmMachine) = 8

    override fun write(value: OlmMachine, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface QrCodeInterface {
    
    fun `otherUserId`(): String
    fun `otherDeviceId`(): String
    fun `flowId`(): String
    fun `roomId`(): String?
    fun `weStarted`(): Boolean
    fun `isDone`(): Boolean
    fun `isCancelled`(): Boolean
    fun `cancelInfo`(): CancelInfo?
    fun `reciprocated`(): Boolean
    fun `hasBeenScanned`(): Boolean
    fun `confirm`(): ConfirmVerificationResult?
    fun `cancel`(`cancelCode`: String): OutgoingVerificationRequest?
    fun `generateQrCode`(): String?
    fun `setChangesListener`(`listener`: QrCodeListener)
    fun `state`(): QrCodeState
}

class QrCode(
    pointer: Pointer
) : FFIObject(pointer), QrCodeInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_QrCode_object_free(this.pointer, status)
        }
    }

    override fun `otherUserId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_other_user_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `otherDeviceId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_other_device_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `flowId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_flow_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `roomId`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_room_id(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `weStarted`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_we_started(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `isDone`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_is_done(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `isCancelled`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_is_cancelled(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `cancelInfo`(): CancelInfo? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_cancel_info(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeCancelInfo.lift(it)
        }
    
    override fun `reciprocated`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_reciprocated(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `hasBeenScanned`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_has_been_scanned(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `confirm`(): ConfirmVerificationResult? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_confirm(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeConfirmVerificationResult.lift(it)
        }
    
    override fun `cancel`(`cancelCode`: String): OutgoingVerificationRequest? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_cancel(it, FfiConverterString.lower(`cancelCode`),  _status)
}
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }
    
    override fun `generateQrCode`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_generate_qr_code(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `setChangesListener`(`listener`: QrCodeListener) =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_set_changes_listener(it, FfiConverterTypeQrCodeListener.lower(`listener`),  _status)
}
        }
    
    
    override fun `state`(): QrCodeState =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_QrCode_state(it,  _status)
}
        }.let {
            FfiConverterTypeQrCodeState.lift(it)
        }
    
    

    
}

public object FfiConverterTypeQrCode: FfiConverter<QrCode, Pointer> {
    override fun lower(value: QrCode): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): QrCode {
        return QrCode(value)
    }

    override fun read(buf: ByteBuffer): QrCode {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: QrCode) = 8

    override fun write(value: QrCode, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface SasInterface {
    
    fun `otherUserId`(): String
    fun `otherDeviceId`(): String
    fun `flowId`(): String
    fun `roomId`(): String?
    fun `weStarted`(): Boolean
    fun `isDone`(): Boolean
    fun `accept`(): OutgoingVerificationRequest?@Throws(CryptoStoreException::class)
    fun `confirm`(): ConfirmVerificationResult?
    fun `cancel`(`cancelCode`: String): OutgoingVerificationRequest?
    fun `getEmojiIndices`(): List<Int>?
    fun `getDecimals`(): List<Int>?
    fun `setChangesListener`(`listener`: SasListener)
    fun `state`(): SasState
}

class Sas(
    pointer: Pointer
) : FFIObject(pointer), SasInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_Sas_object_free(this.pointer, status)
        }
    }

    override fun `otherUserId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_other_user_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `otherDeviceId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_other_device_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `flowId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_flow_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `roomId`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_room_id(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `weStarted`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_we_started(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `isDone`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_is_done(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `accept`(): OutgoingVerificationRequest? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_accept(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `confirm`(): ConfirmVerificationResult? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_confirm(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeConfirmVerificationResult.lift(it)
        }
    
    override fun `cancel`(`cancelCode`: String): OutgoingVerificationRequest? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_cancel(it, FfiConverterString.lower(`cancelCode`),  _status)
}
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }
    
    override fun `getEmojiIndices`(): List<Int>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_get_emoji_indices(it,  _status)
}
        }.let {
            FfiConverterOptionalSequenceInt.lift(it)
        }
    
    override fun `getDecimals`(): List<Int>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_get_decimals(it,  _status)
}
        }.let {
            FfiConverterOptionalSequenceInt.lift(it)
        }
    
    override fun `setChangesListener`(`listener`: SasListener) =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_set_changes_listener(it, FfiConverterTypeSasListener.lower(`listener`),  _status)
}
        }
    
    
    override fun `state`(): SasState =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Sas_state(it,  _status)
}
        }.let {
            FfiConverterTypeSasState.lift(it)
        }
    
    

    
}

public object FfiConverterTypeSas: FfiConverter<Sas, Pointer> {
    override fun lower(value: Sas): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Sas {
        return Sas(value)
    }

    override fun read(buf: ByteBuffer): Sas {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Sas) = 8

    override fun write(value: Sas, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface VerificationInterface {
    
    fun `asQr`(): QrCode?
    fun `asSas`(): Sas?
}

class Verification(
    pointer: Pointer
) : FFIObject(pointer), VerificationInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_Verification_object_free(this.pointer, status)
        }
    }

    override fun `asQr`(): QrCode? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Verification_as_qr(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeQrCode.lift(it)
        }
    
    override fun `asSas`(): Sas? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_Verification_as_sas(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeSas.lift(it)
        }
    
    

    
}

public object FfiConverterTypeVerification: FfiConverter<Verification, Pointer> {
    override fun lower(value: Verification): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Verification {
        return Verification(value)
    }

    override fun read(buf: ByteBuffer): Verification {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Verification) = 8

    override fun write(value: Verification, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface VerificationRequestInterface {
    
    fun `otherUserId`(): String
    fun `otherDeviceId`(): String?
    fun `flowId`(): String
    fun `roomId`(): String?
    fun `weStarted`(): Boolean
    fun `isReady`(): Boolean
    fun `isDone`(): Boolean
    fun `isPassive`(): Boolean
    fun `isCancelled`(): Boolean
    fun `cancelInfo`(): CancelInfo?
    fun `theirSupportedMethods`(): List<String>?
    fun `ourSupportedMethods`(): List<String>?
    fun `accept`(`methods`: List<String>): OutgoingVerificationRequest?@Throws(CryptoStoreException::class)
    fun `startSasVerification`(): StartSasResult?@Throws(CryptoStoreException::class)
    fun `startQrVerification`(): QrCode?
    fun `scanQrCode`(`data`: String): ScanResult?
    fun `cancel`(): OutgoingVerificationRequest?
    fun `setChangesListener`(`listener`: VerificationRequestListener)
    fun `state`(): VerificationRequestState
}

class VerificationRequest(
    pointer: Pointer
) : FFIObject(pointer), VerificationRequestInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_matrix_sdk_crypto_ffi_bf0e_VerificationRequest_object_free(this.pointer, status)
        }
    }

    override fun `otherUserId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_other_user_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `otherDeviceId`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_other_device_id(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `flowId`(): String =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_flow_id(it,  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `roomId`(): String? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_room_id(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `weStarted`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_we_started(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `isReady`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_ready(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `isDone`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_done(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `isPassive`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_passive(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `isCancelled`(): Boolean =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_is_cancelled(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `cancelInfo`(): CancelInfo? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_cancel_info(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeCancelInfo.lift(it)
        }
    
    override fun `theirSupportedMethods`(): List<String>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_their_supported_methods(it,  _status)
}
        }.let {
            FfiConverterOptionalSequenceString.lift(it)
        }
    
    override fun `ourSupportedMethods`(): List<String>? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_our_supported_methods(it,  _status)
}
        }.let {
            FfiConverterOptionalSequenceString.lift(it)
        }
    
    override fun `accept`(`methods`: List<String>): OutgoingVerificationRequest? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_accept(it, FfiConverterSequenceString.lower(`methods`),  _status)
}
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `startSasVerification`(): StartSasResult? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_start_sas_verification(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeStartSasResult.lift(it)
        }
    
    
        @Throws(CryptoStoreException::class)override fun `startQrVerification`(): QrCode? =
        callWithPointer {
    rustCallWithError(CryptoStoreException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_start_qr_verification(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeQrCode.lift(it)
        }
    
    override fun `scanQrCode`(`data`: String): ScanResult? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_scan_qr_code(it, FfiConverterString.lower(`data`),  _status)
}
        }.let {
            FfiConverterOptionalTypeScanResult.lift(it)
        }
    
    override fun `cancel`(): OutgoingVerificationRequest? =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_cancel(it,  _status)
}
        }.let {
            FfiConverterOptionalTypeOutgoingVerificationRequest.lift(it)
        }
    
    override fun `setChangesListener`(`listener`: VerificationRequestListener) =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_set_changes_listener(it, FfiConverterTypeVerificationRequestListener.lower(`listener`),  _status)
}
        }
    
    
    override fun `state`(): VerificationRequestState =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_VerificationRequest_state(it,  _status)
}
        }.let {
            FfiConverterTypeVerificationRequestState.lift(it)
        }
    
    

    
}

public object FfiConverterTypeVerificationRequest: FfiConverter<VerificationRequest, Pointer> {
    override fun lower(value: VerificationRequest): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): VerificationRequest {
        return VerificationRequest(value)
    }

    override fun read(buf: ByteBuffer): VerificationRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: VerificationRequest) = 8

    override fun write(value: VerificationRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class BootstrapCrossSigningResult (
    var `uploadSigningKeysRequest`: UploadSigningKeysRequest, 
    var `signatureRequest`: SignatureUploadRequest
) {
    
}

public object FfiConverterTypeBootstrapCrossSigningResult: FfiConverterRustBuffer<BootstrapCrossSigningResult> {
    override fun read(buf: ByteBuffer): BootstrapCrossSigningResult {
        return BootstrapCrossSigningResult(
            FfiConverterTypeUploadSigningKeysRequest.read(buf),
            FfiConverterTypeSignatureUploadRequest.read(buf),
        )
    }

    override fun allocationSize(value: BootstrapCrossSigningResult) = (
            FfiConverterTypeUploadSigningKeysRequest.allocationSize(value.`uploadSigningKeysRequest`) +
            FfiConverterTypeSignatureUploadRequest.allocationSize(value.`signatureRequest`)
    )

    override fun write(value: BootstrapCrossSigningResult, buf: ByteBuffer) {
            FfiConverterTypeUploadSigningKeysRequest.write(value.`uploadSigningKeysRequest`, buf)
            FfiConverterTypeSignatureUploadRequest.write(value.`signatureRequest`, buf)
    }
}




data class CancelInfo (
    var `cancelCode`: String, 
    var `reason`: String, 
    var `cancelledByUs`: Boolean
) {
    
}

public object FfiConverterTypeCancelInfo: FfiConverterRustBuffer<CancelInfo> {
    override fun read(buf: ByteBuffer): CancelInfo {
        return CancelInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CancelInfo) = (
            FfiConverterString.allocationSize(value.`cancelCode`) +
            FfiConverterString.allocationSize(value.`reason`) +
            FfiConverterBoolean.allocationSize(value.`cancelledByUs`)
    )

    override fun write(value: CancelInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`cancelCode`, buf)
            FfiConverterString.write(value.`reason`, buf)
            FfiConverterBoolean.write(value.`cancelledByUs`, buf)
    }
}




data class ConfirmVerificationResult (
    var `requests`: List<OutgoingVerificationRequest>, 
    var `signatureRequest`: SignatureUploadRequest?
) {
    
}

public object FfiConverterTypeConfirmVerificationResult: FfiConverterRustBuffer<ConfirmVerificationResult> {
    override fun read(buf: ByteBuffer): ConfirmVerificationResult {
        return ConfirmVerificationResult(
            FfiConverterSequenceTypeOutgoingVerificationRequest.read(buf),
            FfiConverterOptionalTypeSignatureUploadRequest.read(buf),
        )
    }

    override fun allocationSize(value: ConfirmVerificationResult) = (
            FfiConverterSequenceTypeOutgoingVerificationRequest.allocationSize(value.`requests`) +
            FfiConverterOptionalTypeSignatureUploadRequest.allocationSize(value.`signatureRequest`)
    )

    override fun write(value: ConfirmVerificationResult, buf: ByteBuffer) {
            FfiConverterSequenceTypeOutgoingVerificationRequest.write(value.`requests`, buf)
            FfiConverterOptionalTypeSignatureUploadRequest.write(value.`signatureRequest`, buf)
    }
}




data class CrossSigningKeyExport (
    var `masterKey`: String?, 
    var `selfSigningKey`: String?, 
    var `userSigningKey`: String?
) {
    
}

public object FfiConverterTypeCrossSigningKeyExport: FfiConverterRustBuffer<CrossSigningKeyExport> {
    override fun read(buf: ByteBuffer): CrossSigningKeyExport {
        return CrossSigningKeyExport(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: CrossSigningKeyExport) = (
            FfiConverterOptionalString.allocationSize(value.`masterKey`) +
            FfiConverterOptionalString.allocationSize(value.`selfSigningKey`) +
            FfiConverterOptionalString.allocationSize(value.`userSigningKey`)
    )

    override fun write(value: CrossSigningKeyExport, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`masterKey`, buf)
            FfiConverterOptionalString.write(value.`selfSigningKey`, buf)
            FfiConverterOptionalString.write(value.`userSigningKey`, buf)
    }
}




data class CrossSigningStatus (
    var `hasMaster`: Boolean, 
    var `hasSelfSigning`: Boolean, 
    var `hasUserSigning`: Boolean
) {
    
}

public object FfiConverterTypeCrossSigningStatus: FfiConverterRustBuffer<CrossSigningStatus> {
    override fun read(buf: ByteBuffer): CrossSigningStatus {
        return CrossSigningStatus(
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: CrossSigningStatus) = (
            FfiConverterBoolean.allocationSize(value.`hasMaster`) +
            FfiConverterBoolean.allocationSize(value.`hasSelfSigning`) +
            FfiConverterBoolean.allocationSize(value.`hasUserSigning`)
    )

    override fun write(value: CrossSigningStatus, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasMaster`, buf)
            FfiConverterBoolean.write(value.`hasSelfSigning`, buf)
            FfiConverterBoolean.write(value.`hasUserSigning`, buf)
    }
}




data class DecryptedEvent (
    var `clearEvent`: String, 
    var `senderCurve25519Key`: String, 
    var `claimedEd25519Key`: String?, 
    var `forwardingCurve25519Chain`: List<String>, 
    var `verificationState`: VerificationState
) {
    
}

public object FfiConverterTypeDecryptedEvent: FfiConverterRustBuffer<DecryptedEvent> {
    override fun read(buf: ByteBuffer): DecryptedEvent {
        return DecryptedEvent(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterTypeVerificationState.read(buf),
        )
    }

    override fun allocationSize(value: DecryptedEvent) = (
            FfiConverterString.allocationSize(value.`clearEvent`) +
            FfiConverterString.allocationSize(value.`senderCurve25519Key`) +
            FfiConverterOptionalString.allocationSize(value.`claimedEd25519Key`) +
            FfiConverterSequenceString.allocationSize(value.`forwardingCurve25519Chain`) +
            FfiConverterTypeVerificationState.allocationSize(value.`verificationState`)
    )

    override fun write(value: DecryptedEvent, buf: ByteBuffer) {
            FfiConverterString.write(value.`clearEvent`, buf)
            FfiConverterString.write(value.`senderCurve25519Key`, buf)
            FfiConverterOptionalString.write(value.`claimedEd25519Key`, buf)
            FfiConverterSequenceString.write(value.`forwardingCurve25519Chain`, buf)
            FfiConverterTypeVerificationState.write(value.`verificationState`, buf)
    }
}




data class Device (
    var `userId`: String, 
    var `deviceId`: String, 
    var `keys`: Map<String, String>, 
    var `algorithms`: List<String>, 
    var `displayName`: String?, 
    var `isBlocked`: Boolean, 
    var `locallyTrusted`: Boolean, 
    var `crossSigningTrusted`: Boolean
) {
    
}

public object FfiConverterTypeDevice: FfiConverterRustBuffer<Device> {
    override fun read(buf: ByteBuffer): Device {
        return Device(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterMapStringString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Device) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`deviceId`) +
            FfiConverterMapStringString.allocationSize(value.`keys`) +
            FfiConverterSequenceString.allocationSize(value.`algorithms`) +
            FfiConverterOptionalString.allocationSize(value.`displayName`) +
            FfiConverterBoolean.allocationSize(value.`isBlocked`) +
            FfiConverterBoolean.allocationSize(value.`locallyTrusted`) +
            FfiConverterBoolean.allocationSize(value.`crossSigningTrusted`)
    )

    override fun write(value: Device, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`deviceId`, buf)
            FfiConverterMapStringString.write(value.`keys`, buf)
            FfiConverterSequenceString.write(value.`algorithms`, buf)
            FfiConverterOptionalString.write(value.`displayName`, buf)
            FfiConverterBoolean.write(value.`isBlocked`, buf)
            FfiConverterBoolean.write(value.`locallyTrusted`, buf)
            FfiConverterBoolean.write(value.`crossSigningTrusted`, buf)
    }
}




data class DeviceLists (
    var `changed`: List<String>, 
    var `left`: List<String>
) {
    
}

public object FfiConverterTypeDeviceLists: FfiConverterRustBuffer<DeviceLists> {
    override fun read(buf: ByteBuffer): DeviceLists {
        return DeviceLists(
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: DeviceLists) = (
            FfiConverterSequenceString.allocationSize(value.`changed`) +
            FfiConverterSequenceString.allocationSize(value.`left`)
    )

    override fun write(value: DeviceLists, buf: ByteBuffer) {
            FfiConverterSequenceString.write(value.`changed`, buf)
            FfiConverterSequenceString.write(value.`left`, buf)
    }
}




data class EncryptionSettings (
    var `algorithm`: EventEncryptionAlgorithm, 
    var `rotationPeriod`: ULong, 
    var `rotationPeriodMsgs`: ULong, 
    var `historyVisibility`: HistoryVisibility, 
    var `onlyAllowTrustedDevices`: Boolean
) {
    
}

public object FfiConverterTypeEncryptionSettings: FfiConverterRustBuffer<EncryptionSettings> {
    override fun read(buf: ByteBuffer): EncryptionSettings {
        return EncryptionSettings(
            FfiConverterTypeEventEncryptionAlgorithm.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterTypeHistoryVisibility.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: EncryptionSettings) = (
            FfiConverterTypeEventEncryptionAlgorithm.allocationSize(value.`algorithm`) +
            FfiConverterULong.allocationSize(value.`rotationPeriod`) +
            FfiConverterULong.allocationSize(value.`rotationPeriodMsgs`) +
            FfiConverterTypeHistoryVisibility.allocationSize(value.`historyVisibility`) +
            FfiConverterBoolean.allocationSize(value.`onlyAllowTrustedDevices`)
    )

    override fun write(value: EncryptionSettings, buf: ByteBuffer) {
            FfiConverterTypeEventEncryptionAlgorithm.write(value.`algorithm`, buf)
            FfiConverterULong.write(value.`rotationPeriod`, buf)
            FfiConverterULong.write(value.`rotationPeriodMsgs`, buf)
            FfiConverterTypeHistoryVisibility.write(value.`historyVisibility`, buf)
            FfiConverterBoolean.write(value.`onlyAllowTrustedDevices`, buf)
    }
}




data class KeyRequestPair (
    var `cancellation`: Request?, 
    var `keyRequest`: Request
) {
    
}

public object FfiConverterTypeKeyRequestPair: FfiConverterRustBuffer<KeyRequestPair> {
    override fun read(buf: ByteBuffer): KeyRequestPair {
        return KeyRequestPair(
            FfiConverterOptionalTypeRequest.read(buf),
            FfiConverterTypeRequest.read(buf),
        )
    }

    override fun allocationSize(value: KeyRequestPair) = (
            FfiConverterOptionalTypeRequest.allocationSize(value.`cancellation`) +
            FfiConverterTypeRequest.allocationSize(value.`keyRequest`)
    )

    override fun write(value: KeyRequestPair, buf: ByteBuffer) {
            FfiConverterOptionalTypeRequest.write(value.`cancellation`, buf)
            FfiConverterTypeRequest.write(value.`keyRequest`, buf)
    }
}




data class KeysImportResult (
    var `imported`: Long, 
    var `total`: Long, 
    var `keys`: Map<String, Map<String, List<String>>>
) {
    
}

public object FfiConverterTypeKeysImportResult: FfiConverterRustBuffer<KeysImportResult> {
    override fun read(buf: ByteBuffer): KeysImportResult {
        return KeysImportResult(
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterMapStringMapStringListString.read(buf),
        )
    }

    override fun allocationSize(value: KeysImportResult) = (
            FfiConverterLong.allocationSize(value.`imported`) +
            FfiConverterLong.allocationSize(value.`total`) +
            FfiConverterMapStringMapStringListString.allocationSize(value.`keys`)
    )

    override fun write(value: KeysImportResult, buf: ByteBuffer) {
            FfiConverterLong.write(value.`imported`, buf)
            FfiConverterLong.write(value.`total`, buf)
            FfiConverterMapStringMapStringListString.write(value.`keys`, buf)
    }
}




data class MegolmV1BackupKey (
    var `publicKey`: String, 
    var `signatures`: Map<String, Map<String, String>>, 
    var `passphraseInfo`: PassphraseInfo?, 
    var `backupAlgorithm`: String
) {
    
}

public object FfiConverterTypeMegolmV1BackupKey: FfiConverterRustBuffer<MegolmV1BackupKey> {
    override fun read(buf: ByteBuffer): MegolmV1BackupKey {
        return MegolmV1BackupKey(
            FfiConverterString.read(buf),
            FfiConverterMapStringMapStringString.read(buf),
            FfiConverterOptionalTypePassphraseInfo.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: MegolmV1BackupKey) = (
            FfiConverterString.allocationSize(value.`publicKey`) +
            FfiConverterMapStringMapStringString.allocationSize(value.`signatures`) +
            FfiConverterOptionalTypePassphraseInfo.allocationSize(value.`passphraseInfo`) +
            FfiConverterString.allocationSize(value.`backupAlgorithm`)
    )

    override fun write(value: MegolmV1BackupKey, buf: ByteBuffer) {
            FfiConverterString.write(value.`publicKey`, buf)
            FfiConverterMapStringMapStringString.write(value.`signatures`, buf)
            FfiConverterOptionalTypePassphraseInfo.write(value.`passphraseInfo`, buf)
            FfiConverterString.write(value.`backupAlgorithm`, buf)
    }
}




data class MigrationData (
    var `account`: PickledAccount, 
    var `sessions`: List<PickledSession>, 
    var `inboundGroupSessions`: List<PickledInboundGroupSession>, 
    var `backupVersion`: String?, 
    var `backupRecoveryKey`: String?, 
    var `pickleKey`: List<UByte>, 
    var `crossSigning`: CrossSigningKeyExport, 
    var `trackedUsers`: List<String>
) {
    
}

public object FfiConverterTypeMigrationData: FfiConverterRustBuffer<MigrationData> {
    override fun read(buf: ByteBuffer): MigrationData {
        return MigrationData(
            FfiConverterTypePickledAccount.read(buf),
            FfiConverterSequenceTypePickledSession.read(buf),
            FfiConverterSequenceTypePickledInboundGroupSession.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterTypeCrossSigningKeyExport.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: MigrationData) = (
            FfiConverterTypePickledAccount.allocationSize(value.`account`) +
            FfiConverterSequenceTypePickledSession.allocationSize(value.`sessions`) +
            FfiConverterSequenceTypePickledInboundGroupSession.allocationSize(value.`inboundGroupSessions`) +
            FfiConverterOptionalString.allocationSize(value.`backupVersion`) +
            FfiConverterOptionalString.allocationSize(value.`backupRecoveryKey`) +
            FfiConverterSequenceUByte.allocationSize(value.`pickleKey`) +
            FfiConverterTypeCrossSigningKeyExport.allocationSize(value.`crossSigning`) +
            FfiConverterSequenceString.allocationSize(value.`trackedUsers`)
    )

    override fun write(value: MigrationData, buf: ByteBuffer) {
            FfiConverterTypePickledAccount.write(value.`account`, buf)
            FfiConverterSequenceTypePickledSession.write(value.`sessions`, buf)
            FfiConverterSequenceTypePickledInboundGroupSession.write(value.`inboundGroupSessions`, buf)
            FfiConverterOptionalString.write(value.`backupVersion`, buf)
            FfiConverterOptionalString.write(value.`backupRecoveryKey`, buf)
            FfiConverterSequenceUByte.write(value.`pickleKey`, buf)
            FfiConverterTypeCrossSigningKeyExport.write(value.`crossSigning`, buf)
            FfiConverterSequenceString.write(value.`trackedUsers`, buf)
    }
}




data class PassphraseInfo (
    var `privateKeySalt`: String, 
    var `privateKeyIterations`: Int
) {
    
}

public object FfiConverterTypePassphraseInfo: FfiConverterRustBuffer<PassphraseInfo> {
    override fun read(buf: ByteBuffer): PassphraseInfo {
        return PassphraseInfo(
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
        )
    }

    override fun allocationSize(value: PassphraseInfo) = (
            FfiConverterString.allocationSize(value.`privateKeySalt`) +
            FfiConverterInt.allocationSize(value.`privateKeyIterations`)
    )

    override fun write(value: PassphraseInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`privateKeySalt`, buf)
            FfiConverterInt.write(value.`privateKeyIterations`, buf)
    }
}




data class PickledAccount (
    var `userId`: String, 
    var `deviceId`: String, 
    var `pickle`: String, 
    var `shared`: Boolean, 
    var `uploadedSignedKeyCount`: Long
) {
    
}

public object FfiConverterTypePickledAccount: FfiConverterRustBuffer<PickledAccount> {
    override fun read(buf: ByteBuffer): PickledAccount {
        return PickledAccount(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: PickledAccount) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`deviceId`) +
            FfiConverterString.allocationSize(value.`pickle`) +
            FfiConverterBoolean.allocationSize(value.`shared`) +
            FfiConverterLong.allocationSize(value.`uploadedSignedKeyCount`)
    )

    override fun write(value: PickledAccount, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`deviceId`, buf)
            FfiConverterString.write(value.`pickle`, buf)
            FfiConverterBoolean.write(value.`shared`, buf)
            FfiConverterLong.write(value.`uploadedSignedKeyCount`, buf)
    }
}




data class PickledInboundGroupSession (
    var `pickle`: String, 
    var `senderKey`: String, 
    var `signingKey`: Map<String, String>, 
    var `roomId`: String, 
    var `forwardingChains`: List<String>, 
    var `imported`: Boolean, 
    var `backedUp`: Boolean
) {
    
}

public object FfiConverterTypePickledInboundGroupSession: FfiConverterRustBuffer<PickledInboundGroupSession> {
    override fun read(buf: ByteBuffer): PickledInboundGroupSession {
        return PickledInboundGroupSession(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterMapStringString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: PickledInboundGroupSession) = (
            FfiConverterString.allocationSize(value.`pickle`) +
            FfiConverterString.allocationSize(value.`senderKey`) +
            FfiConverterMapStringString.allocationSize(value.`signingKey`) +
            FfiConverterString.allocationSize(value.`roomId`) +
            FfiConverterSequenceString.allocationSize(value.`forwardingChains`) +
            FfiConverterBoolean.allocationSize(value.`imported`) +
            FfiConverterBoolean.allocationSize(value.`backedUp`)
    )

    override fun write(value: PickledInboundGroupSession, buf: ByteBuffer) {
            FfiConverterString.write(value.`pickle`, buf)
            FfiConverterString.write(value.`senderKey`, buf)
            FfiConverterMapStringString.write(value.`signingKey`, buf)
            FfiConverterString.write(value.`roomId`, buf)
            FfiConverterSequenceString.write(value.`forwardingChains`, buf)
            FfiConverterBoolean.write(value.`imported`, buf)
            FfiConverterBoolean.write(value.`backedUp`, buf)
    }
}




data class PickledSession (
    var `pickle`: String, 
    var `senderKey`: String, 
    var `createdUsingFallbackKey`: Boolean, 
    var `creationTime`: String, 
    var `lastUseTime`: String
) {
    
}

public object FfiConverterTypePickledSession: FfiConverterRustBuffer<PickledSession> {
    override fun read(buf: ByteBuffer): PickledSession {
        return PickledSession(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PickledSession) = (
            FfiConverterString.allocationSize(value.`pickle`) +
            FfiConverterString.allocationSize(value.`senderKey`) +
            FfiConverterBoolean.allocationSize(value.`createdUsingFallbackKey`) +
            FfiConverterString.allocationSize(value.`creationTime`) +
            FfiConverterString.allocationSize(value.`lastUseTime`)
    )

    override fun write(value: PickledSession, buf: ByteBuffer) {
            FfiConverterString.write(value.`pickle`, buf)
            FfiConverterString.write(value.`senderKey`, buf)
            FfiConverterBoolean.write(value.`createdUsingFallbackKey`, buf)
            FfiConverterString.write(value.`creationTime`, buf)
            FfiConverterString.write(value.`lastUseTime`, buf)
    }
}




data class RequestVerificationResult (
    var `verification`: VerificationRequest, 
    var `request`: OutgoingVerificationRequest
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`verification`, 
        this.`request`)
    }
    
}

public object FfiConverterTypeRequestVerificationResult: FfiConverterRustBuffer<RequestVerificationResult> {
    override fun read(buf: ByteBuffer): RequestVerificationResult {
        return RequestVerificationResult(
            FfiConverterTypeVerificationRequest.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: RequestVerificationResult) = (
            FfiConverterTypeVerificationRequest.allocationSize(value.`verification`) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.`request`)
    )

    override fun write(value: RequestVerificationResult, buf: ByteBuffer) {
            FfiConverterTypeVerificationRequest.write(value.`verification`, buf)
            FfiConverterTypeOutgoingVerificationRequest.write(value.`request`, buf)
    }
}




data class RoomKeyCounts (
    var `total`: Long, 
    var `backedUp`: Long
) {
    
}

public object FfiConverterTypeRoomKeyCounts: FfiConverterRustBuffer<RoomKeyCounts> {
    override fun read(buf: ByteBuffer): RoomKeyCounts {
        return RoomKeyCounts(
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: RoomKeyCounts) = (
            FfiConverterLong.allocationSize(value.`total`) +
            FfiConverterLong.allocationSize(value.`backedUp`)
    )

    override fun write(value: RoomKeyCounts, buf: ByteBuffer) {
            FfiConverterLong.write(value.`total`, buf)
            FfiConverterLong.write(value.`backedUp`, buf)
    }
}




data class ScanResult (
    var `qr`: QrCode, 
    var `request`: OutgoingVerificationRequest
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`qr`, 
        this.`request`)
    }
    
}

public object FfiConverterTypeScanResult: FfiConverterRustBuffer<ScanResult> {
    override fun read(buf: ByteBuffer): ScanResult {
        return ScanResult(
            FfiConverterTypeQrCode.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: ScanResult) = (
            FfiConverterTypeQrCode.allocationSize(value.`qr`) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.`request`)
    )

    override fun write(value: ScanResult, buf: ByteBuffer) {
            FfiConverterTypeQrCode.write(value.`qr`, buf)
            FfiConverterTypeOutgoingVerificationRequest.write(value.`request`, buf)
    }
}




data class SessionMigrationData (
    var `userId`: String, 
    var `deviceId`: String, 
    var `curve25519Key`: String, 
    var `ed25519Key`: String, 
    var `sessions`: List<PickledSession>, 
    var `inboundGroupSessions`: List<PickledInboundGroupSession>, 
    var `pickleKey`: List<UByte>
) {
    
}

public object FfiConverterTypeSessionMigrationData: FfiConverterRustBuffer<SessionMigrationData> {
    override fun read(buf: ByteBuffer): SessionMigrationData {
        return SessionMigrationData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypePickledSession.read(buf),
            FfiConverterSequenceTypePickledInboundGroupSession.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: SessionMigrationData) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`deviceId`) +
            FfiConverterString.allocationSize(value.`curve25519Key`) +
            FfiConverterString.allocationSize(value.`ed25519Key`) +
            FfiConverterSequenceTypePickledSession.allocationSize(value.`sessions`) +
            FfiConverterSequenceTypePickledInboundGroupSession.allocationSize(value.`inboundGroupSessions`) +
            FfiConverterSequenceUByte.allocationSize(value.`pickleKey`)
    )

    override fun write(value: SessionMigrationData, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`deviceId`, buf)
            FfiConverterString.write(value.`curve25519Key`, buf)
            FfiConverterString.write(value.`ed25519Key`, buf)
            FfiConverterSequenceTypePickledSession.write(value.`sessions`, buf)
            FfiConverterSequenceTypePickledInboundGroupSession.write(value.`inboundGroupSessions`, buf)
            FfiConverterSequenceUByte.write(value.`pickleKey`, buf)
    }
}




data class SignatureUploadRequest (
    var `body`: String
) {
    
}

public object FfiConverterTypeSignatureUploadRequest: FfiConverterRustBuffer<SignatureUploadRequest> {
    override fun read(buf: ByteBuffer): SignatureUploadRequest {
        return SignatureUploadRequest(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: SignatureUploadRequest) = (
            FfiConverterString.allocationSize(value.`body`)
    )

    override fun write(value: SignatureUploadRequest, buf: ByteBuffer) {
            FfiConverterString.write(value.`body`, buf)
    }
}




data class SignatureVerification (
    var `deviceSignature`: SignatureState, 
    var `userIdentitySignature`: SignatureState, 
    var `otherDevicesSignatures`: Map<String, SignatureState>, 
    var `trusted`: Boolean
) {
    
}

public object FfiConverterTypeSignatureVerification: FfiConverterRustBuffer<SignatureVerification> {
    override fun read(buf: ByteBuffer): SignatureVerification {
        return SignatureVerification(
            FfiConverterTypeSignatureState.read(buf),
            FfiConverterTypeSignatureState.read(buf),
            FfiConverterMapStringSignatureState.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: SignatureVerification) = (
            FfiConverterTypeSignatureState.allocationSize(value.`deviceSignature`) +
            FfiConverterTypeSignatureState.allocationSize(value.`userIdentitySignature`) +
            FfiConverterMapStringSignatureState.allocationSize(value.`otherDevicesSignatures`) +
            FfiConverterBoolean.allocationSize(value.`trusted`)
    )

    override fun write(value: SignatureVerification, buf: ByteBuffer) {
            FfiConverterTypeSignatureState.write(value.`deviceSignature`, buf)
            FfiConverterTypeSignatureState.write(value.`userIdentitySignature`, buf)
            FfiConverterMapStringSignatureState.write(value.`otherDevicesSignatures`, buf)
            FfiConverterBoolean.write(value.`trusted`, buf)
    }
}




data class StartSasResult (
    var `sas`: Sas, 
    var `request`: OutgoingVerificationRequest
) : Disposable {
    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.`sas`, 
        this.`request`)
    }
    
}

public object FfiConverterTypeStartSasResult: FfiConverterRustBuffer<StartSasResult> {
    override fun read(buf: ByteBuffer): StartSasResult {
        return StartSasResult(
            FfiConverterTypeSas.read(buf),
            FfiConverterTypeOutgoingVerificationRequest.read(buf),
        )
    }

    override fun allocationSize(value: StartSasResult) = (
            FfiConverterTypeSas.allocationSize(value.`sas`) +
            FfiConverterTypeOutgoingVerificationRequest.allocationSize(value.`request`)
    )

    override fun write(value: StartSasResult, buf: ByteBuffer) {
            FfiConverterTypeSas.write(value.`sas`, buf)
            FfiConverterTypeOutgoingVerificationRequest.write(value.`request`, buf)
    }
}




data class UploadSigningKeysRequest (
    var `masterKey`: String, 
    var `selfSigningKey`: String, 
    var `userSigningKey`: String
) {
    
}

public object FfiConverterTypeUploadSigningKeysRequest: FfiConverterRustBuffer<UploadSigningKeysRequest> {
    override fun read(buf: ByteBuffer): UploadSigningKeysRequest {
        return UploadSigningKeysRequest(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: UploadSigningKeysRequest) = (
            FfiConverterString.allocationSize(value.`masterKey`) +
            FfiConverterString.allocationSize(value.`selfSigningKey`) +
            FfiConverterString.allocationSize(value.`userSigningKey`)
    )

    override fun write(value: UploadSigningKeysRequest, buf: ByteBuffer) {
            FfiConverterString.write(value.`masterKey`, buf)
            FfiConverterString.write(value.`selfSigningKey`, buf)
            FfiConverterString.write(value.`userSigningKey`, buf)
    }
}




enum class EventEncryptionAlgorithm {
    OLM_V1_CURVE25519_AES_SHA2,MEGOLM_V1_AES_SHA2;
}

public object FfiConverterTypeEventEncryptionAlgorithm: FfiConverterRustBuffer<EventEncryptionAlgorithm> {
    override fun read(buf: ByteBuffer) = try {
        EventEncryptionAlgorithm.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: EventEncryptionAlgorithm) = 4

    override fun write(value: EventEncryptionAlgorithm, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class HistoryVisibility {
    INVITED,JOINED,SHARED,WORLD_READABLE;
}

public object FfiConverterTypeHistoryVisibility: FfiConverterRustBuffer<HistoryVisibility> {
    override fun read(buf: ByteBuffer) = try {
        HistoryVisibility.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: HistoryVisibility) = 4

    override fun write(value: HistoryVisibility, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class LocalTrust {
    VERIFIED,BLACK_LISTED,IGNORED,UNSET;
}

public object FfiConverterTypeLocalTrust: FfiConverterRustBuffer<LocalTrust> {
    override fun read(buf: ByteBuffer) = try {
        LocalTrust.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: LocalTrust) = 4

    override fun write(value: LocalTrust, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class OutgoingVerificationRequest {
    data class ToDevice(
        val `requestId`: String, 
        val `eventType`: String, 
        val `body`: String
        ) : OutgoingVerificationRequest()
    data class InRoom(
        val `requestId`: String, 
        val `roomId`: String, 
        val `eventType`: String, 
        val `content`: String
        ) : OutgoingVerificationRequest()
    

    
}

public object FfiConverterTypeOutgoingVerificationRequest : FfiConverterRustBuffer<OutgoingVerificationRequest>{
    override fun read(buf: ByteBuffer): OutgoingVerificationRequest {
        return when(buf.getInt()) {
            1 -> OutgoingVerificationRequest.ToDevice(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> OutgoingVerificationRequest.InRoom(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: OutgoingVerificationRequest) = when(value) {
        is OutgoingVerificationRequest.ToDevice -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
        is OutgoingVerificationRequest.InRoom -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`roomId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`content`)
            )
        }
    }

    override fun write(value: OutgoingVerificationRequest, buf: ByteBuffer) {
        when(value) {
            is OutgoingVerificationRequest.ToDevice -> {
                buf.putInt(1)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
            is OutgoingVerificationRequest.InRoom -> {
                buf.putInt(2)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`roomId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`content`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class QrCodeState {
    object Started : QrCodeState()
    
    object Scanned : QrCodeState()
    
    object Confirmed : QrCodeState()
    
    object Reciprocated : QrCodeState()
    
    object Done : QrCodeState()
    
    data class Cancelled(
        val `cancelInfo`: CancelInfo
        ) : QrCodeState()
    

    
}

public object FfiConverterTypeQrCodeState : FfiConverterRustBuffer<QrCodeState>{
    override fun read(buf: ByteBuffer): QrCodeState {
        return when(buf.getInt()) {
            1 -> QrCodeState.Started
            2 -> QrCodeState.Scanned
            3 -> QrCodeState.Confirmed
            4 -> QrCodeState.Reciprocated
            5 -> QrCodeState.Done
            6 -> QrCodeState.Cancelled(
                FfiConverterTypeCancelInfo.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: QrCodeState) = when(value) {
        is QrCodeState.Started -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is QrCodeState.Scanned -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is QrCodeState.Confirmed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is QrCodeState.Reciprocated -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is QrCodeState.Done -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is QrCodeState.Cancelled -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeCancelInfo.allocationSize(value.`cancelInfo`)
            )
        }
    }

    override fun write(value: QrCodeState, buf: ByteBuffer) {
        when(value) {
            is QrCodeState.Started -> {
                buf.putInt(1)
                Unit
            }
            is QrCodeState.Scanned -> {
                buf.putInt(2)
                Unit
            }
            is QrCodeState.Confirmed -> {
                buf.putInt(3)
                Unit
            }
            is QrCodeState.Reciprocated -> {
                buf.putInt(4)
                Unit
            }
            is QrCodeState.Done -> {
                buf.putInt(5)
                Unit
            }
            is QrCodeState.Cancelled -> {
                buf.putInt(6)
                FfiConverterTypeCancelInfo.write(value.`cancelInfo`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class Request {
    data class ToDevice(
        val `requestId`: String, 
        val `eventType`: String, 
        val `body`: String
        ) : Request()
    data class KeysUpload(
        val `requestId`: String, 
        val `body`: String
        ) : Request()
    data class KeysQuery(
        val `requestId`: String, 
        val `users`: List<String>
        ) : Request()
    data class KeysClaim(
        val `requestId`: String, 
        val `oneTimeKeys`: Map<String, Map<String, String>>
        ) : Request()
    data class KeysBackup(
        val `requestId`: String, 
        val `version`: String, 
        val `rooms`: String
        ) : Request()
    data class RoomMessage(
        val `requestId`: String, 
        val `roomId`: String, 
        val `eventType`: String, 
        val `content`: String
        ) : Request()
    data class SignatureUpload(
        val `requestId`: String, 
        val `body`: String
        ) : Request()
    

    
}

public object FfiConverterTypeRequest : FfiConverterRustBuffer<Request>{
    override fun read(buf: ByteBuffer): Request {
        return when(buf.getInt()) {
            1 -> Request.ToDevice(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> Request.KeysUpload(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> Request.KeysQuery(
                FfiConverterString.read(buf),
                FfiConverterSequenceString.read(buf),
                )
            4 -> Request.KeysClaim(
                FfiConverterString.read(buf),
                FfiConverterMapStringMapStringString.read(buf),
                )
            5 -> Request.KeysBackup(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            6 -> Request.RoomMessage(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            7 -> Request.SignatureUpload(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Request) = when(value) {
        is Request.ToDevice -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
        is Request.KeysUpload -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
        is Request.KeysQuery -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterSequenceString.allocationSize(value.`users`)
            )
        }
        is Request.KeysClaim -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterMapStringMapStringString.allocationSize(value.`oneTimeKeys`)
            )
        }
        is Request.KeysBackup -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`version`)
                + FfiConverterString.allocationSize(value.`rooms`)
            )
        }
        is Request.RoomMessage -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`roomId`)
                + FfiConverterString.allocationSize(value.`eventType`)
                + FfiConverterString.allocationSize(value.`content`)
            )
        }
        is Request.SignatureUpload -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`requestId`)
                + FfiConverterString.allocationSize(value.`body`)
            )
        }
    }

    override fun write(value: Request, buf: ByteBuffer) {
        when(value) {
            is Request.ToDevice -> {
                buf.putInt(1)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
            is Request.KeysUpload -> {
                buf.putInt(2)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
            is Request.KeysQuery -> {
                buf.putInt(3)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterSequenceString.write(value.`users`, buf)
                Unit
            }
            is Request.KeysClaim -> {
                buf.putInt(4)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterMapStringMapStringString.write(value.`oneTimeKeys`, buf)
                Unit
            }
            is Request.KeysBackup -> {
                buf.putInt(5)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`version`, buf)
                FfiConverterString.write(value.`rooms`, buf)
                Unit
            }
            is Request.RoomMessage -> {
                buf.putInt(6)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`roomId`, buf)
                FfiConverterString.write(value.`eventType`, buf)
                FfiConverterString.write(value.`content`, buf)
                Unit
            }
            is Request.SignatureUpload -> {
                buf.putInt(7)
                FfiConverterString.write(value.`requestId`, buf)
                FfiConverterString.write(value.`body`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class RequestType {
    KEYS_QUERY,KEYS_CLAIM,KEYS_UPLOAD,TO_DEVICE,SIGNATURE_UPLOAD,KEYS_BACKUP,ROOM_MESSAGE;
}

public object FfiConverterTypeRequestType: FfiConverterRustBuffer<RequestType> {
    override fun read(buf: ByteBuffer) = try {
        RequestType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: RequestType) = 4

    override fun write(value: RequestType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class SasState {
    object Started : SasState()
    
    object Accepted : SasState()
    
    data class KeysExchanged(
        val `emojis`: List<Int>?, 
        val `decimals`: List<Int>
        ) : SasState()
    object Confirmed : SasState()
    
    object Done : SasState()
    
    data class Cancelled(
        val `cancelInfo`: CancelInfo
        ) : SasState()
    

    
}

public object FfiConverterTypeSasState : FfiConverterRustBuffer<SasState>{
    override fun read(buf: ByteBuffer): SasState {
        return when(buf.getInt()) {
            1 -> SasState.Started
            2 -> SasState.Accepted
            3 -> SasState.KeysExchanged(
                FfiConverterOptionalSequenceInt.read(buf),
                FfiConverterSequenceInt.read(buf),
                )
            4 -> SasState.Confirmed
            5 -> SasState.Done
            6 -> SasState.Cancelled(
                FfiConverterTypeCancelInfo.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SasState) = when(value) {
        is SasState.Started -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is SasState.Accepted -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is SasState.KeysExchanged -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterOptionalSequenceInt.allocationSize(value.`emojis`)
                + FfiConverterSequenceInt.allocationSize(value.`decimals`)
            )
        }
        is SasState.Confirmed -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is SasState.Done -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is SasState.Cancelled -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeCancelInfo.allocationSize(value.`cancelInfo`)
            )
        }
    }

    override fun write(value: SasState, buf: ByteBuffer) {
        when(value) {
            is SasState.Started -> {
                buf.putInt(1)
                Unit
            }
            is SasState.Accepted -> {
                buf.putInt(2)
                Unit
            }
            is SasState.KeysExchanged -> {
                buf.putInt(3)
                FfiConverterOptionalSequenceInt.write(value.`emojis`, buf)
                FfiConverterSequenceInt.write(value.`decimals`, buf)
                Unit
            }
            is SasState.Confirmed -> {
                buf.putInt(4)
                Unit
            }
            is SasState.Done -> {
                buf.putInt(5)
                Unit
            }
            is SasState.Cancelled -> {
                buf.putInt(6)
                FfiConverterTypeCancelInfo.write(value.`cancelInfo`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class SignatureState {
    MISSING,INVALID,VALID_BUT_NOT_TRUSTED,VALID_AND_TRUSTED;
}

public object FfiConverterTypeSignatureState: FfiConverterRustBuffer<SignatureState> {
    override fun read(buf: ByteBuffer) = try {
        SignatureState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: SignatureState) = 4

    override fun write(value: SignatureState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class UserIdentity {
    data class Own(
        val `userId`: String, 
        val `trustsOurOwnDevice`: Boolean, 
        val `masterKey`: String, 
        val `selfSigningKey`: String, 
        val `userSigningKey`: String
        ) : UserIdentity()
    data class Other(
        val `userId`: String, 
        val `masterKey`: String, 
        val `selfSigningKey`: String
        ) : UserIdentity()
    

    
}

public object FfiConverterTypeUserIdentity : FfiConverterRustBuffer<UserIdentity>{
    override fun read(buf: ByteBuffer): UserIdentity {
        return when(buf.getInt()) {
            1 -> UserIdentity.Own(
                FfiConverterString.read(buf),
                FfiConverterBoolean.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> UserIdentity.Other(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: UserIdentity) = when(value) {
        is UserIdentity.Own -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`userId`)
                + FfiConverterBoolean.allocationSize(value.`trustsOurOwnDevice`)
                + FfiConverterString.allocationSize(value.`masterKey`)
                + FfiConverterString.allocationSize(value.`selfSigningKey`)
                + FfiConverterString.allocationSize(value.`userSigningKey`)
            )
        }
        is UserIdentity.Other -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`userId`)
                + FfiConverterString.allocationSize(value.`masterKey`)
                + FfiConverterString.allocationSize(value.`selfSigningKey`)
            )
        }
    }

    override fun write(value: UserIdentity, buf: ByteBuffer) {
        when(value) {
            is UserIdentity.Own -> {
                buf.putInt(1)
                FfiConverterString.write(value.`userId`, buf)
                FfiConverterBoolean.write(value.`trustsOurOwnDevice`, buf)
                FfiConverterString.write(value.`masterKey`, buf)
                FfiConverterString.write(value.`selfSigningKey`, buf)
                FfiConverterString.write(value.`userSigningKey`, buf)
                Unit
            }
            is UserIdentity.Other -> {
                buf.putInt(2)
                FfiConverterString.write(value.`userId`, buf)
                FfiConverterString.write(value.`masterKey`, buf)
                FfiConverterString.write(value.`selfSigningKey`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class VerificationRequestState {
    object Requested : VerificationRequestState()
    
    data class Ready(
        val `theirMethods`: List<String>, 
        val `ourMethods`: List<String>
        ) : VerificationRequestState()
    object Done : VerificationRequestState()
    
    data class Cancelled(
        val `cancelInfo`: CancelInfo
        ) : VerificationRequestState()
    

    
}

public object FfiConverterTypeVerificationRequestState : FfiConverterRustBuffer<VerificationRequestState>{
    override fun read(buf: ByteBuffer): VerificationRequestState {
        return when(buf.getInt()) {
            1 -> VerificationRequestState.Requested
            2 -> VerificationRequestState.Ready(
                FfiConverterSequenceString.read(buf),
                FfiConverterSequenceString.read(buf),
                )
            3 -> VerificationRequestState.Done
            4 -> VerificationRequestState.Cancelled(
                FfiConverterTypeCancelInfo.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: VerificationRequestState) = when(value) {
        is VerificationRequestState.Requested -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is VerificationRequestState.Ready -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterSequenceString.allocationSize(value.`theirMethods`)
                + FfiConverterSequenceString.allocationSize(value.`ourMethods`)
            )
        }
        is VerificationRequestState.Done -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
            )
        }
        is VerificationRequestState.Cancelled -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeCancelInfo.allocationSize(value.`cancelInfo`)
            )
        }
    }

    override fun write(value: VerificationRequestState, buf: ByteBuffer) {
        when(value) {
            is VerificationRequestState.Requested -> {
                buf.putInt(1)
                Unit
            }
            is VerificationRequestState.Ready -> {
                buf.putInt(2)
                FfiConverterSequenceString.write(value.`theirMethods`, buf)
                FfiConverterSequenceString.write(value.`ourMethods`, buf)
                Unit
            }
            is VerificationRequestState.Done -> {
                buf.putInt(3)
                Unit
            }
            is VerificationRequestState.Cancelled -> {
                buf.putInt(4)
                FfiConverterTypeCancelInfo.write(value.`cancelInfo`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class VerificationState {
    TRUSTED,UNTRUSTED,UNKNOWN_DEVICE;
}

public object FfiConverterTypeVerificationState: FfiConverterRustBuffer<VerificationState> {
    override fun read(buf: ByteBuffer) = try {
        VerificationState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: VerificationState) = 4

    override fun write(value: VerificationState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class CryptoStoreException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class OpenStore(message: String) : CryptoStoreException(message)
        class CryptoStore(message: String) : CryptoStoreException(message)
        class OlmException(message: String) : CryptoStoreException(message)
        class Serialization(message: String) : CryptoStoreException(message)
        class InvalidUserId(message: String) : CryptoStoreException(message)
        class Identifier(message: String) : CryptoStoreException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<CryptoStoreException> {
        override fun lift(error_buf: RustBuffer.ByValue): CryptoStoreException = FfiConverterTypeCryptoStoreError.lift(error_buf)
    }
}

public object FfiConverterTypeCryptoStoreError : FfiConverterRustBuffer<CryptoStoreException> {
    override fun read(buf: ByteBuffer): CryptoStoreException {
        
            return when(buf.getInt()) {
            1 -> CryptoStoreException.OpenStore(FfiConverterString.read(buf))
            2 -> CryptoStoreException.CryptoStore(FfiConverterString.read(buf))
            3 -> CryptoStoreException.OlmException(FfiConverterString.read(buf))
            4 -> CryptoStoreException.Serialization(FfiConverterString.read(buf))
            5 -> CryptoStoreException.InvalidUserId(FfiConverterString.read(buf))
            6 -> CryptoStoreException.Identifier(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: CryptoStoreException): Int {
        return 4
    }

    override fun write(value: CryptoStoreException, buf: ByteBuffer) {
        when(value) {
            is CryptoStoreException.OpenStore -> {
                buf.putInt(1)
                Unit
            }
            is CryptoStoreException.CryptoStore -> {
                buf.putInt(2)
                Unit
            }
            is CryptoStoreException.OlmException -> {
                buf.putInt(3)
                Unit
            }
            is CryptoStoreException.Serialization -> {
                buf.putInt(4)
                Unit
            }
            is CryptoStoreException.InvalidUserId -> {
                buf.putInt(5)
                Unit
            }
            is CryptoStoreException.Identifier -> {
                buf.putInt(6)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class DecodeException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class Decode(message: String) : DecodeException(message)
        class CryptoStore(message: String) : DecodeException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<DecodeException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecodeException = FfiConverterTypeDecodeError.lift(error_buf)
    }
}

public object FfiConverterTypeDecodeError : FfiConverterRustBuffer<DecodeException> {
    override fun read(buf: ByteBuffer): DecodeException {
        
            return when(buf.getInt()) {
            1 -> DecodeException.Decode(FfiConverterString.read(buf))
            2 -> DecodeException.CryptoStore(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: DecodeException): Int {
        return 4
    }

    override fun write(value: DecodeException, buf: ByteBuffer) {
        when(value) {
            is DecodeException.Decode -> {
                buf.putInt(1)
                Unit
            }
            is DecodeException.CryptoStore -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class DecryptionException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class Identifier(message: String) : DecryptionException(message)
        class Serialization(message: String) : DecryptionException(message)
        class Megolm(message: String) : DecryptionException(message)
        class MissingRoomKey(message: String) : DecryptionException(message)
        class Store(message: String) : DecryptionException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<DecryptionException> {
        override fun lift(error_buf: RustBuffer.ByValue): DecryptionException = FfiConverterTypeDecryptionError.lift(error_buf)
    }
}

public object FfiConverterTypeDecryptionError : FfiConverterRustBuffer<DecryptionException> {
    override fun read(buf: ByteBuffer): DecryptionException {
        
            return when(buf.getInt()) {
            1 -> DecryptionException.Identifier(FfiConverterString.read(buf))
            2 -> DecryptionException.Serialization(FfiConverterString.read(buf))
            3 -> DecryptionException.Megolm(FfiConverterString.read(buf))
            4 -> DecryptionException.MissingRoomKey(FfiConverterString.read(buf))
            5 -> DecryptionException.Store(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: DecryptionException): Int {
        return 4
    }

    override fun write(value: DecryptionException, buf: ByteBuffer) {
        when(value) {
            is DecryptionException.Identifier -> {
                buf.putInt(1)
                Unit
            }
            is DecryptionException.Serialization -> {
                buf.putInt(2)
                Unit
            }
            is DecryptionException.Megolm -> {
                buf.putInt(3)
                Unit
            }
            is DecryptionException.MissingRoomKey -> {
                buf.putInt(4)
                Unit
            }
            is DecryptionException.Store -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class KeyImportException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class Export(message: String) : KeyImportException(message)
        class CryptoStore(message: String) : KeyImportException(message)
        class Json(message: String) : KeyImportException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<KeyImportException> {
        override fun lift(error_buf: RustBuffer.ByValue): KeyImportException = FfiConverterTypeKeyImportError.lift(error_buf)
    }
}

public object FfiConverterTypeKeyImportError : FfiConverterRustBuffer<KeyImportException> {
    override fun read(buf: ByteBuffer): KeyImportException {
        
            return when(buf.getInt()) {
            1 -> KeyImportException.Export(FfiConverterString.read(buf))
            2 -> KeyImportException.CryptoStore(FfiConverterString.read(buf))
            3 -> KeyImportException.Json(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: KeyImportException): Int {
        return 4
    }

    override fun write(value: KeyImportException, buf: ByteBuffer) {
        when(value) {
            is KeyImportException.Export -> {
                buf.putInt(1)
                Unit
            }
            is KeyImportException.CryptoStore -> {
                buf.putInt(2)
                Unit
            }
            is KeyImportException.Json -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class MigrationException: Exception() {
    // Each variant is a nested class
    
    class Generic(
        val `errorMessage`: String
        ) : MigrationException() {
        override val message
            get() = "errorMessage=${ `errorMessage` }"
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<MigrationException> {
        override fun lift(error_buf: RustBuffer.ByValue): MigrationException = FfiConverterTypeMigrationError.lift(error_buf)
    }

    
}

public object FfiConverterTypeMigrationError : FfiConverterRustBuffer<MigrationException> {
    override fun read(buf: ByteBuffer): MigrationException {
        

        return when(buf.getInt()) {
            1 -> MigrationException.Generic(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MigrationException): Int {
        return when(value) {
            is MigrationException.Generic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`errorMessage`)
            )
        }
    }

    override fun write(value: MigrationException, buf: ByteBuffer) {
        when(value) {
            is MigrationException.Generic -> {
                buf.putInt(1)
                FfiConverterString.write(value.`errorMessage`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class PkDecryptionException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class Olm(message: String) : PkDecryptionException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<PkDecryptionException> {
        override fun lift(error_buf: RustBuffer.ByValue): PkDecryptionException = FfiConverterTypePkDecryptionError.lift(error_buf)
    }
}

public object FfiConverterTypePkDecryptionError : FfiConverterRustBuffer<PkDecryptionException> {
    override fun read(buf: ByteBuffer): PkDecryptionException {
        
            return when(buf.getInt()) {
            1 -> PkDecryptionException.Olm(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: PkDecryptionException): Int {
        return 4
    }

    override fun write(value: PkDecryptionException, buf: ByteBuffer) {
        when(value) {
            is PkDecryptionException.Olm -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class SecretImportException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class Import(message: String) : SecretImportException(message)
        class CryptoStore(message: String) : SecretImportException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<SecretImportException> {
        override fun lift(error_buf: RustBuffer.ByValue): SecretImportException = FfiConverterTypeSecretImportError.lift(error_buf)
    }
}

public object FfiConverterTypeSecretImportError : FfiConverterRustBuffer<SecretImportException> {
    override fun read(buf: ByteBuffer): SecretImportException {
        
            return when(buf.getInt()) {
            1 -> SecretImportException.Import(FfiConverterString.read(buf))
            2 -> SecretImportException.CryptoStore(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: SecretImportException): Int {
        return 4
    }

    override fun write(value: SecretImportException, buf: ByteBuffer) {
        when(value) {
            is SecretImportException.Import -> {
                buf.putInt(1)
                Unit
            }
            is SecretImportException.CryptoStore -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





sealed class SignatureException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class Signature(message: String) : SignatureException(message)
        class Identifier(message: String) : SignatureException(message)
        class CryptoStore(message: String) : SignatureException(message)
        class UnknownDevice(message: String) : SignatureException(message)
        class UnknownUserIdentity(message: String) : SignatureException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<SignatureException> {
        override fun lift(error_buf: RustBuffer.ByValue): SignatureException = FfiConverterTypeSignatureError.lift(error_buf)
    }
}

public object FfiConverterTypeSignatureError : FfiConverterRustBuffer<SignatureException> {
    override fun read(buf: ByteBuffer): SignatureException {
        
            return when(buf.getInt()) {
            1 -> SignatureException.Signature(FfiConverterString.read(buf))
            2 -> SignatureException.Identifier(FfiConverterString.read(buf))
            3 -> SignatureException.CryptoStore(FfiConverterString.read(buf))
            4 -> SignatureException.UnknownDevice(FfiConverterString.read(buf))
            5 -> SignatureException.UnknownUserIdentity(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: SignatureException): Int {
        return 4
    }

    override fun write(value: SignatureException, buf: ByteBuffer) {
        when(value) {
            is SignatureException.Signature -> {
                buf.putInt(1)
                Unit
            }
            is SignatureException.Identifier -> {
                buf.putInt(2)
                Unit
            }
            is SignatureException.CryptoStore -> {
                buf.putInt(3)
                Unit
            }
            is SignatureException.UnknownDevice -> {
                buf.putInt(4)
                Unit
            }
            is SignatureException.UnknownUserIdentity -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for Logger Callback Interface

public interface Logger {
    fun `log`(`logLine`: String)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeLogger : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeLogger.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeLogger.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeLog`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeLog`(kotlinCallbackInterface: Logger, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`log`(
                    FfiConverterString.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeLogger: FfiConverterCallbackInterface<Logger>(
    foreignCallback = ForeignCallbackTypeLogger()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_matrix_sdk_crypto_ffi_bf0e_Logger_init_callback(this.foreignCallback, status)
        }
    }
}






// Declaration and FfiConverters for ProgressListener Callback Interface

public interface ProgressListener {
    fun `onProgress`(`progress`: Int, `total`: Int)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeProgressListener : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeProgressListener.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeProgressListener.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeOnProgress`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeOnProgress`(kotlinCallbackInterface: ProgressListener, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`onProgress`(
                    FfiConverterInt.read(buf), 
                    FfiConverterInt.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeProgressListener: FfiConverterCallbackInterface<ProgressListener>(
    foreignCallback = ForeignCallbackTypeProgressListener()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_matrix_sdk_crypto_ffi_bf0e_ProgressListener_init_callback(this.foreignCallback, status)
        }
    }
}






// Declaration and FfiConverters for QrCodeListener Callback Interface

public interface QrCodeListener {
    fun `onChange`(`state`: QrCodeState)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeQrCodeListener : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeQrCodeListener.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeQrCodeListener.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeOnChange`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeOnChange`(kotlinCallbackInterface: QrCodeListener, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`onChange`(
                    FfiConverterTypeQrCodeState.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeQrCodeListener: FfiConverterCallbackInterface<QrCodeListener>(
    foreignCallback = ForeignCallbackTypeQrCodeListener()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_matrix_sdk_crypto_ffi_bf0e_QrCodeListener_init_callback(this.foreignCallback, status)
        }
    }
}






// Declaration and FfiConverters for SasListener Callback Interface

public interface SasListener {
    fun `onChange`(`state`: SasState)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeSasListener : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeSasListener.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeSasListener.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeOnChange`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeOnChange`(kotlinCallbackInterface: SasListener, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`onChange`(
                    FfiConverterTypeSasState.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeSasListener: FfiConverterCallbackInterface<SasListener>(
    foreignCallback = ForeignCallbackTypeSasListener()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_matrix_sdk_crypto_ffi_bf0e_SasListener_init_callback(this.foreignCallback, status)
        }
    }
}






// Declaration and FfiConverters for VerificationRequestListener Callback Interface

public interface VerificationRequestListener {
    fun `onChange`(`state`: VerificationRequestState)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeVerificationRequestListener : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeVerificationRequestListener.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeVerificationRequestListener.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeOnChange`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeOnChange`(kotlinCallbackInterface: VerificationRequestListener, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`onChange`(
                    FfiConverterTypeVerificationRequestState.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeVerificationRequestListener: FfiConverterCallbackInterface<VerificationRequestListener>(
    foreignCallback = ForeignCallbackTypeVerificationRequestListener()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_matrix_sdk_crypto_ffi_bf0e_VerificationRequestListener_init_callback(this.foreignCallback, status)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeBackupKeys: FfiConverterRustBuffer<BackupKeys?> {
    override fun read(buf: ByteBuffer): BackupKeys? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeBackupKeys.read(buf)
    }

    override fun allocationSize(value: BackupKeys?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeBackupKeys.allocationSize(value)
        }
    }

    override fun write(value: BackupKeys?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeBackupKeys.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeBackupRecoveryKey: FfiConverterRustBuffer<BackupRecoveryKey?> {
    override fun read(buf: ByteBuffer): BackupRecoveryKey? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeBackupRecoveryKey.read(buf)
    }

    override fun allocationSize(value: BackupRecoveryKey?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeBackupRecoveryKey.allocationSize(value)
        }
    }

    override fun write(value: BackupRecoveryKey?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeBackupRecoveryKey.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeQrCode: FfiConverterRustBuffer<QrCode?> {
    override fun read(buf: ByteBuffer): QrCode? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeQrCode.read(buf)
    }

    override fun allocationSize(value: QrCode?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeQrCode.allocationSize(value)
        }
    }

    override fun write(value: QrCode?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeQrCode.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSas: FfiConverterRustBuffer<Sas?> {
    override fun read(buf: ByteBuffer): Sas? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSas.read(buf)
    }

    override fun allocationSize(value: Sas?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSas.allocationSize(value)
        }
    }

    override fun write(value: Sas?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSas.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeVerification: FfiConverterRustBuffer<Verification?> {
    override fun read(buf: ByteBuffer): Verification? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeVerification.read(buf)
    }

    override fun allocationSize(value: Verification?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeVerification.allocationSize(value)
        }
    }

    override fun write(value: Verification?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeVerification.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeVerificationRequest: FfiConverterRustBuffer<VerificationRequest?> {
    override fun read(buf: ByteBuffer): VerificationRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeVerificationRequest.read(buf)
    }

    override fun allocationSize(value: VerificationRequest?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeVerificationRequest.allocationSize(value)
        }
    }

    override fun write(value: VerificationRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeVerificationRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCancelInfo: FfiConverterRustBuffer<CancelInfo?> {
    override fun read(buf: ByteBuffer): CancelInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCancelInfo.read(buf)
    }

    override fun allocationSize(value: CancelInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCancelInfo.allocationSize(value)
        }
    }

    override fun write(value: CancelInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCancelInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeConfirmVerificationResult: FfiConverterRustBuffer<ConfirmVerificationResult?> {
    override fun read(buf: ByteBuffer): ConfirmVerificationResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeConfirmVerificationResult.read(buf)
    }

    override fun allocationSize(value: ConfirmVerificationResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeConfirmVerificationResult.allocationSize(value)
        }
    }

    override fun write(value: ConfirmVerificationResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeConfirmVerificationResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCrossSigningKeyExport: FfiConverterRustBuffer<CrossSigningKeyExport?> {
    override fun read(buf: ByteBuffer): CrossSigningKeyExport? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCrossSigningKeyExport.read(buf)
    }

    override fun allocationSize(value: CrossSigningKeyExport?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCrossSigningKeyExport.allocationSize(value)
        }
    }

    override fun write(value: CrossSigningKeyExport?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCrossSigningKeyExport.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeDevice: FfiConverterRustBuffer<Device?> {
    override fun read(buf: ByteBuffer): Device? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeDevice.read(buf)
    }

    override fun allocationSize(value: Device?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeDevice.allocationSize(value)
        }
    }

    override fun write(value: Device?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeDevice.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypePassphraseInfo: FfiConverterRustBuffer<PassphraseInfo?> {
    override fun read(buf: ByteBuffer): PassphraseInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypePassphraseInfo.read(buf)
    }

    override fun allocationSize(value: PassphraseInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypePassphraseInfo.allocationSize(value)
        }
    }

    override fun write(value: PassphraseInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypePassphraseInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRequestVerificationResult: FfiConverterRustBuffer<RequestVerificationResult?> {
    override fun read(buf: ByteBuffer): RequestVerificationResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRequestVerificationResult.read(buf)
    }

    override fun allocationSize(value: RequestVerificationResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRequestVerificationResult.allocationSize(value)
        }
    }

    override fun write(value: RequestVerificationResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRequestVerificationResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeScanResult: FfiConverterRustBuffer<ScanResult?> {
    override fun read(buf: ByteBuffer): ScanResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeScanResult.read(buf)
    }

    override fun allocationSize(value: ScanResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeScanResult.allocationSize(value)
        }
    }

    override fun write(value: ScanResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeScanResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeSignatureUploadRequest: FfiConverterRustBuffer<SignatureUploadRequest?> {
    override fun read(buf: ByteBuffer): SignatureUploadRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeSignatureUploadRequest.read(buf)
    }

    override fun allocationSize(value: SignatureUploadRequest?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeSignatureUploadRequest.allocationSize(value)
        }
    }

    override fun write(value: SignatureUploadRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeSignatureUploadRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeStartSasResult: FfiConverterRustBuffer<StartSasResult?> {
    override fun read(buf: ByteBuffer): StartSasResult? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeStartSasResult.read(buf)
    }

    override fun allocationSize(value: StartSasResult?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeStartSasResult.allocationSize(value)
        }
    }

    override fun write(value: StartSasResult?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeStartSasResult.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeOutgoingVerificationRequest: FfiConverterRustBuffer<OutgoingVerificationRequest?> {
    override fun read(buf: ByteBuffer): OutgoingVerificationRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeOutgoingVerificationRequest.read(buf)
    }

    override fun allocationSize(value: OutgoingVerificationRequest?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeOutgoingVerificationRequest.allocationSize(value)
        }
    }

    override fun write(value: OutgoingVerificationRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeOutgoingVerificationRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeRequest: FfiConverterRustBuffer<Request?> {
    override fun read(buf: ByteBuffer): Request? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeRequest.read(buf)
    }

    override fun allocationSize(value: Request?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeRequest.allocationSize(value)
        }
    }

    override fun write(value: Request?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeRequest.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeUserIdentity: FfiConverterRustBuffer<UserIdentity?> {
    override fun read(buf: ByteBuffer): UserIdentity? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUserIdentity.read(buf)
    }

    override fun allocationSize(value: UserIdentity?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeUserIdentity.allocationSize(value)
        }
    }

    override fun write(value: UserIdentity?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUserIdentity.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceInt: FfiConverterRustBuffer<List<Int>?> {
    override fun read(buf: ByteBuffer): List<Int>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceInt.read(buf)
    }

    override fun allocationSize(value: List<Int>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceInt.allocationSize(value)
        }
    }

    override fun write(value: List<Int>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<String>?> {
    override fun read(buf: ByteBuffer): List<String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<String>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceInt: FfiConverterRustBuffer<List<Int>> {
    override fun read(buf: ByteBuffer): List<Int> {
        val len = buf.getInt()
        return List<Int>(len) {
            FfiConverterInt.read(buf)
        }
    }

    override fun allocationSize(value: List<Int>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterInt.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Int>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterInt.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeVerificationRequest: FfiConverterRustBuffer<List<VerificationRequest>> {
    override fun read(buf: ByteBuffer): List<VerificationRequest> {
        val len = buf.getInt()
        return List<VerificationRequest>(len) {
            FfiConverterTypeVerificationRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<VerificationRequest>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeVerificationRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<VerificationRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeVerificationRequest.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeDevice: FfiConverterRustBuffer<List<Device>> {
    override fun read(buf: ByteBuffer): List<Device> {
        val len = buf.getInt()
        return List<Device>(len) {
            FfiConverterTypeDevice.read(buf)
        }
    }

    override fun allocationSize(value: List<Device>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeDevice.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Device>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeDevice.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePickledInboundGroupSession: FfiConverterRustBuffer<List<PickledInboundGroupSession>> {
    override fun read(buf: ByteBuffer): List<PickledInboundGroupSession> {
        val len = buf.getInt()
        return List<PickledInboundGroupSession>(len) {
            FfiConverterTypePickledInboundGroupSession.read(buf)
        }
    }

    override fun allocationSize(value: List<PickledInboundGroupSession>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypePickledInboundGroupSession.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PickledInboundGroupSession>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypePickledInboundGroupSession.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypePickledSession: FfiConverterRustBuffer<List<PickledSession>> {
    override fun read(buf: ByteBuffer): List<PickledSession> {
        val len = buf.getInt()
        return List<PickledSession>(len) {
            FfiConverterTypePickledSession.read(buf)
        }
    }

    override fun allocationSize(value: List<PickledSession>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypePickledSession.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PickledSession>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypePickledSession.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeOutgoingVerificationRequest: FfiConverterRustBuffer<List<OutgoingVerificationRequest>> {
    override fun read(buf: ByteBuffer): List<OutgoingVerificationRequest> {
        val len = buf.getInt()
        return List<OutgoingVerificationRequest>(len) {
            FfiConverterTypeOutgoingVerificationRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<OutgoingVerificationRequest>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeOutgoingVerificationRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<OutgoingVerificationRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeOutgoingVerificationRequest.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeRequest: FfiConverterRustBuffer<List<Request>> {
    override fun read(buf: ByteBuffer): List<Request> {
        val len = buf.getInt()
        return List<Request>(len) {
            FfiConverterTypeRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<Request>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Request>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeRequest.write(it, buf)
        }
    }
}



public object FfiConverterMapStringInt: FfiConverterRustBuffer<Map<String, Int>> {
    override fun read(buf: ByteBuffer): Map<String, Int> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, Int> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterInt.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, Int>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterInt.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, Int>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterInt.write(v, buf)
        }
    }
}



public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<String, String>> {
    override fun read(buf: ByteBuffer): Map<String, String> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, String> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, String>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringSignatureState: FfiConverterRustBuffer<Map<String, SignatureState>> {
    override fun read(buf: ByteBuffer): Map<String, SignatureState> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, SignatureState> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterTypeSignatureState.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, SignatureState>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterTypeSignatureState.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, SignatureState>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterTypeSignatureState.write(v, buf)
        }
    }
}



public object FfiConverterMapStringListString: FfiConverterRustBuffer<Map<String, List<String>>> {
    override fun read(buf: ByteBuffer): Map<String, List<String>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, List<String>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterSequenceString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, List<String>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterSequenceString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, List<String>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterSequenceString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringMapStringString: FfiConverterRustBuffer<Map<String, Map<String, String>>> {
    override fun read(buf: ByteBuffer): Map<String, Map<String, String>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, Map<String, String>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterMapStringString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, Map<String, String>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterMapStringString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, Map<String, String>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterMapStringString.write(v, buf)
        }
    }
}



public object FfiConverterMapStringMapStringListString: FfiConverterRustBuffer<Map<String, Map<String, List<String>>>> {
    override fun read(buf: ByteBuffer): Map<String, Map<String, List<String>>> {
        // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
        val items : MutableMap<String, Map<String, List<String>>> = mutableMapOf()
        val len = buf.getInt()
        repeat(len) {
            val k = FfiConverterString.read(buf)
            val v = FfiConverterMapStringListString.read(buf)
            items[k] = v
        }
        return items
    }

    override fun allocationSize(value: Map<String, Map<String, List<String>>>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterMapStringListString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, Map<String, List<String>>>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterMapStringListString.write(v, buf)
        }
    }
}

        fun `setLogger`(`logger`: Logger) =
            
    rustCall() { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_set_logger(FfiConverterTypeLogger.lower(`logger`), _status)
}

    
        @Throws(MigrationException::class)

        fun `migrate`(`data`: MigrationData, `path`: String, `passphrase`: String?, `progressListener`: ProgressListener) =
            
    rustCallWithError(MigrationException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_migrate(FfiConverterTypeMigrationData.lower(`data`), FfiConverterString.lower(`path`), FfiConverterOptionalString.lower(`passphrase`), FfiConverterTypeProgressListener.lower(`progressListener`), _status)
}

    
        @Throws(MigrationException::class)

        fun `migrateSessions`(`data`: SessionMigrationData, `path`: String, `passphrase`: String?, `progressListener`: ProgressListener) =
            
    rustCallWithError(MigrationException) { _status ->
    _UniFFILib.INSTANCE.matrix_sdk_crypto_ffi_bf0e_migrate_sessions(FfiConverterTypeSessionMigrationData.lower(`data`), FfiConverterString.lower(`path`), FfiConverterOptionalString.lower(`passphrase`), FfiConverterTypeProgressListener.lower(`progressListener`), _status)
}

    

