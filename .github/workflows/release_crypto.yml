name: Release Crypto Library

on:
  workflow_dispatch:
    inputs:
      rust-checkout-ref:
        description: 'The branch, tag or SHA to checkout on the rust sdk.'
        required: true
        default: 'main'
      crypto-sdk-version:
        description: 'The new version for the rust-crypto library.'
        required: true


jobs:
  build_native:
    name: Build and generate crypto native libs
    runs-on: macos-latest
    env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}

    concurrency:
      group: ${{ github.ref }}-${{ github.job }}
      cancel-in-progress: true

    steps:
    
      - name: Checkout this repo
        uses: actions/checkout@v3
        with: 
          path: main

      - name: Checkout matrix rust sdk repo
        uses: actions/checkout@v3
        with:
          repository: matrix-org/matrix-rust-sdk
          path: rust-sdk
          ref: '${{ github.event.inputs.rust-checkout-ref }}'

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install android sdk
        uses: malinskiy/action-android/install-sdk@release/0.1.2
        
      - name: Install android ndk   
        uses: nttld/setup-ndk@v1
        id: install-ndk
        with:
          ndk-version: r22b
          
      - name: Create symlinks for buildchain
        run: |
          export PATH="${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/darwin-x86_64/bin:$PATH"
          echo $PATH
    
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly

#      - name: Create cargo config
#        run: |
#          echo [target.aarch64-linux-android] > $HOME/.cargo/config.toml
#          echo ar = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/darwin-x86_64/bin/ar\" >> $HOME/.cargo/config.toml
#          echo linker = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android30-clang\"  >> $HOME/.cargo/config.toml
#
#          echo [target.i686-linux-android] >> $HOME/.cargo/config.toml
#          echo ar = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/darwin-x86_64/bin/ar\" >> $HOME/.cargo/config.toml
#          echo linker = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/darwin-x86_64/bin/i686-linux-android30-clang\"  >> $HOME/.cargo/config.toml
#
#          echo [target.armv7-linux-androideabi] >> $HOME/.cargo/config.toml
#          echo ar = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/darwin-x86_64/bin/ar\" >> $HOME/.cargo/config.toml
#          echo linker = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi30-clang\"  >> $HOME/.cargo/config.toml
#
#          cat $HOME/.cargo/config.toml

      - name: Add Rust targets
        run: |
          rustup target add x86_64-linux-android
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android

      - name: Cargo install uniffi_bindgen
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: uniffi_bindgen    

      - name: Configure gradle
        uses: gradle/gradle-build-action@v2

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
#          pip install -r requirements.txt

      - name: Run publish script
        env:
          ANDROID_NDK: ${{ steps.install-ndk.outputs.ndk-path }}
          CRYPTO_SDK_VERSION: ${{ github.event.inputs.crypto_sdk_version }}
          GITHUB_API_TOKEN: ${{ secrets.API_TOKEN }}
        run: python3 ./main/scripts/release.py --version $CRYPTO_SDK_VERSION --sdk_path rust-sdk --module CRYPTO
