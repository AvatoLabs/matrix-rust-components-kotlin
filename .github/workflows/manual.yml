name: Manual workflows

on:
  workflow_dispatch:

jobs:
  build:
    name: Build and generate Crypto bindings
    runs-on: ubuntu-latest
    strategy:
      matrix:
        targets: [ {value: armv7-linux-androideabi, folder: armeabi-v7a}, {value: i686-linux-android, folder: x86}, {value: aarch64-linux-android, folder: arm64-v8a} ]
        
    steps:
    
      - name: Checkout this repo
        uses: actions/checkout@v3
        with: 
          path: main

      - name: Checkout matrix rust sdk repo
        uses: actions/checkout@v3
        with:
          repository: matrix-org/matrix-rust-sdk
          path: rust-sdk  
    
      - name: Install android sdk
        uses: malinskiy/action-android/install-sdk@release/0.1.2
        
      - name: Install android ndk   
        uses: nttld/setup-ndk@v1
        id: install-ndk
        with:
          ndk-version: r22b
          
      - name: Load cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.targets.value }}
          toolchain: stable
          override: true
            
      - name: Create cargo config
        run: |
          echo [target.aarch64-linux-android] > $HOME/.cargo/config.toml
          echo ar = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/ar\" >> $HOME/.cargo/config.toml
          echo linker = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android30-clang\"  >> $HOME/.cargo/config.toml
          
          echo [target.i686-linux-android] >> $HOME/.cargo/config.toml
          echo ar = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/ar\" >> $HOME/.cargo/config.toml
          echo linker = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android30-clang\"  >> $HOME/.cargo/config.toml
          
          echo [target.armv7-linux-androideabi] >> $HOME/.cargo/config.toml
          echo ar = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/ar\" >> $HOME/.cargo/config.toml
          echo linker = \"${{ steps.install-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi30-clang\"  >> $HOME/.cargo/config.toml
          
          cat $HOME/.cargo/config.toml
        
      - name: Cargo install uniffi_bindgen
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: uniffi_bindgen    
          
      - name: Cargo build    
        uses: actions-rs/cargo@v1
        env: 
          ANDROID_NDK: ${{ steps.install-ndk.outputs.ndk-path }}
        with:
          command: build
          args: --manifest-path rust-sdk/crates/matrix-crypto-ffi/Cargo.toml --release --target=${{ matrix.targets.value }}
          
      - name: Move libmatrix_crypto.so to jniLibs folder
        run: |
          mkdir -p main/crypto/src/main/jniLibs/${{ matrix.targets.folder }}   
          ls main
          ls rust-sdk
          ls rust-sdk/crates/matrix-crypto-ffi
          cp rust-sdk/crates/matrix-crypto-ffi/target/${{ matrix.targets.value }}/release/libmatrix_crypto.so main/crypto/src/main/jniLibs/${{ matrix.targets.folder }}/libuniffi_olm.so
          
      - name: Upload binary result
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.targets.folder }}_libuniffi_olm
          path: main/crypto/src/main/jniLibs/${{ matrix.targets.folder }}/libuniffi_olm.so
      
